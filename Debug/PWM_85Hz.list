
PWM_85Hz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028a4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080029b0  080029b0  000039b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029d4  080029d4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080029d4  080029d4  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029d4  080029d4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029d4  080029d4  000039d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080029d8  080029d8  000039d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080029dc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  080029e8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  080029e8  00004108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007862  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014b1  00000000  00000000  0000b897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  0000cd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000722  00000000  00000000  0000d680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165e6  00000000  00000000  0000dda2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b44  00000000  00000000  00024388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008411b  00000000  00000000  0002decc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b1fe7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002600  00000000  00000000  000b202c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000b462c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002998 	.word	0x08002998

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002998 	.word	0x08002998

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fc08 	bl	8000964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f856 	bl	8000204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 fa5e 	bl	8000618 <MX_GPIO_Init>
  MX_TIM1_Init();
 800015c:	f000 f898 	bl	8000290 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000160:	f000 f950 	bl	8000404 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000164:	f000 f9de 	bl	8000524 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000168:	2100      	movs	r1, #0
 800016a:	4821      	ldr	r0, [pc, #132]	@ (80001f0 <main+0xa4>)
 800016c:	f001 fc76 	bl	8001a5c <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);
 8000170:	2104      	movs	r1, #4
 8000172:	481f      	ldr	r0, [pc, #124]	@ (80001f0 <main+0xa4>)
 8000174:	f001 fb78 	bl	8001868 <HAL_TIM_OC_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000178:	2100      	movs	r1, #0
 800017a:	481d      	ldr	r0, [pc, #116]	@ (80001f0 <main+0xa4>)
 800017c:	f002 fa6e 	bl	800265c <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000180:	2100      	movs	r1, #0
 8000182:	481c      	ldr	r0, [pc, #112]	@ (80001f4 <main+0xa8>)
 8000184:	f001 fc6a 	bl	8001a5c <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_2);
 8000188:	2104      	movs	r1, #4
 800018a:	481a      	ldr	r0, [pc, #104]	@ (80001f4 <main+0xa8>)
 800018c:	f001 fb6c 	bl	8001868 <HAL_TIM_OC_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000190:	2100      	movs	r1, #0
 8000192:	4819      	ldr	r0, [pc, #100]	@ (80001f8 <main+0xac>)
 8000194:	f001 fc62 	bl	8001a5c <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,423);
 8000198:	4b15      	ldr	r3, [pc, #84]	@ (80001f0 <main+0xa4>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	f240 12a7 	movw	r2, #423	@ 0x1a7
 80001a0:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,211);
 80001a2:	4b13      	ldr	r3, [pc, #76]	@ (80001f0 <main+0xa4>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	22d3      	movs	r2, #211	@ 0xd3
 80001a8:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,387);
 80001aa:	4b12      	ldr	r3, [pc, #72]	@ (80001f4 <main+0xa8>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	f240 1283 	movw	r2, #387	@ 0x183
 80001b2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,423);
 80001b4:	4b0f      	ldr	r3, [pc, #60]	@ (80001f4 <main+0xa8>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	f240 12a7 	movw	r2, #423	@ 0x1a7
 80001bc:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,387);
 80001be:	4b0e      	ldr	r3, [pc, #56]	@ (80001f8 <main+0xac>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	f240 1283 	movw	r2, #387	@ 0x183
 80001c6:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    static uint32_t led;
    if(HAL_GetTick()-led > 1000){
 80001c8:	f000 fc24 	bl	8000a14 <HAL_GetTick>
 80001cc:	4602      	mov	r2, r0
 80001ce:	4b0b      	ldr	r3, [pc, #44]	@ (80001fc <main+0xb0>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	1ad3      	subs	r3, r2, r3
 80001d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80001d8:	d9f6      	bls.n	80001c8 <main+0x7c>
    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80001da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001de:	4808      	ldr	r0, [pc, #32]	@ (8000200 <main+0xb4>)
 80001e0:	f000 fea2 	bl	8000f28 <HAL_GPIO_TogglePin>
    	led = HAL_GetTick();
 80001e4:	f000 fc16 	bl	8000a14 <HAL_GetTick>
 80001e8:	4603      	mov	r3, r0
 80001ea:	4a04      	ldr	r2, [pc, #16]	@ (80001fc <main+0xb0>)
 80001ec:	6013      	str	r3, [r2, #0]
  {
 80001ee:	e7eb      	b.n	80001c8 <main+0x7c>
 80001f0:	20000028 	.word	0x20000028
 80001f4:	20000070 	.word	0x20000070
 80001f8:	200000b8 	.word	0x200000b8
 80001fc:	20000100 	.word	0x20000100
 8000200:	40011000 	.word	0x40011000

08000204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b090      	sub	sp, #64	@ 0x40
 8000208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020a:	f107 0318 	add.w	r3, r7, #24
 800020e:	2228      	movs	r2, #40	@ 0x28
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f002 fb93 	bl	800293e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
 800021e:	605a      	str	r2, [r3, #4]
 8000220:	609a      	str	r2, [r3, #8]
 8000222:	60da      	str	r2, [r3, #12]
 8000224:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000226:	2301      	movs	r3, #1
 8000228:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800022a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800022e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000230:	2300      	movs	r3, #0
 8000232:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000234:	2301      	movs	r3, #1
 8000236:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000238:	2302      	movs	r3, #2
 800023a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800023c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000240:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000242:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000246:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000248:	f107 0318 	add.w	r3, r7, #24
 800024c:	4618      	mov	r0, r3
 800024e:	f000 fe85 	bl	8000f5c <HAL_RCC_OscConfig>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000258:	f000 fa2a 	bl	80006b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025c:	230f      	movs	r3, #15
 800025e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000260:	2302      	movs	r3, #2
 8000262:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000268:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800026c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	2102      	movs	r1, #2
 8000276:	4618      	mov	r0, r3
 8000278:	f001 f8f2 	bl	8001460 <HAL_RCC_ClockConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000282:	f000 fa15 	bl	80006b0 <Error_Handler>
  }
}
 8000286:	bf00      	nop
 8000288:	3740      	adds	r7, #64	@ 0x40
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b096      	sub	sp, #88	@ 0x58
 8000294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000296:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002a4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
 80002bc:	611a      	str	r2, [r3, #16]
 80002be:	615a      	str	r2, [r3, #20]
 80002c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2220      	movs	r2, #32
 80002c6:	2100      	movs	r1, #0
 80002c8:	4618      	mov	r0, r3
 80002ca:	f002 fb38 	bl	800293e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002ce:	4b4b      	ldr	r3, [pc, #300]	@ (80003fc <MX_TIM1_Init+0x16c>)
 80002d0:	4a4b      	ldr	r2, [pc, #300]	@ (8000400 <MX_TIM1_Init+0x170>)
 80002d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80002d4:	4b49      	ldr	r3, [pc, #292]	@ (80003fc <MX_TIM1_Init+0x16c>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002da:	4b48      	ldr	r3, [pc, #288]	@ (80003fc <MX_TIM1_Init+0x16c>)
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 846;
 80002e0:	4b46      	ldr	r3, [pc, #280]	@ (80003fc <MX_TIM1_Init+0x16c>)
 80002e2:	f240 324e 	movw	r2, #846	@ 0x34e
 80002e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002e8:	4b44      	ldr	r3, [pc, #272]	@ (80003fc <MX_TIM1_Init+0x16c>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002ee:	4b43      	ldr	r3, [pc, #268]	@ (80003fc <MX_TIM1_Init+0x16c>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002f4:	4b41      	ldr	r3, [pc, #260]	@ (80003fc <MX_TIM1_Init+0x16c>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80002fa:	4840      	ldr	r0, [pc, #256]	@ (80003fc <MX_TIM1_Init+0x16c>)
 80002fc:	f001 fa0c 	bl	8001718 <HAL_TIM_Base_Init>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000306:	f000 f9d3 	bl	80006b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800030a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800030e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000310:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000314:	4619      	mov	r1, r3
 8000316:	4839      	ldr	r0, [pc, #228]	@ (80003fc <MX_TIM1_Init+0x16c>)
 8000318:	f001 fd60 	bl	8001ddc <HAL_TIM_ConfigClockSource>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000322:	f000 f9c5 	bl	80006b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000326:	4835      	ldr	r0, [pc, #212]	@ (80003fc <MX_TIM1_Init+0x16c>)
 8000328:	f001 fb40 	bl	80019ac <HAL_TIM_PWM_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000332:	f000 f9bd 	bl	80006b0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000336:	4831      	ldr	r0, [pc, #196]	@ (80003fc <MX_TIM1_Init+0x16c>)
 8000338:	f001 fa3d 	bl	80017b6 <HAL_TIM_OC_Init>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000342:	f000 f9b5 	bl	80006b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000346:	2350      	movs	r3, #80	@ 0x50
 8000348:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800034a:	2300      	movs	r3, #0
 800034c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800034e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000352:	4619      	mov	r1, r3
 8000354:	4829      	ldr	r0, [pc, #164]	@ (80003fc <MX_TIM1_Init+0x16c>)
 8000356:	f002 fa1f 	bl	8002798 <HAL_TIMEx_MasterConfigSynchronization>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000360:	f000 f9a6 	bl	80006b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000364:	2360      	movs	r3, #96	@ 0x60
 8000366:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 423;
 8000368:	f240 13a7 	movw	r3, #423	@ 0x1a7
 800036c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800036e:	2300      	movs	r3, #0
 8000370:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000372:	2300      	movs	r3, #0
 8000374:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000376:	2300      	movs	r3, #0
 8000378:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800037a:	2300      	movs	r3, #0
 800037c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800037e:	2300      	movs	r3, #0
 8000380:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000382:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000386:	2200      	movs	r2, #0
 8000388:	4619      	mov	r1, r3
 800038a:	481c      	ldr	r0, [pc, #112]	@ (80003fc <MX_TIM1_Init+0x16c>)
 800038c:	f001 fc64 	bl	8001c58 <HAL_TIM_PWM_ConfigChannel>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000396:	f000 f98b 	bl	80006b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 800039a:	2310      	movs	r3, #16
 800039c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 211;
 800039e:	23d3      	movs	r3, #211	@ 0xd3
 80003a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80003a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003a6:	2204      	movs	r2, #4
 80003a8:	4619      	mov	r1, r3
 80003aa:	4814      	ldr	r0, [pc, #80]	@ (80003fc <MX_TIM1_Init+0x16c>)
 80003ac:	f001 fbf8 	bl	8001ba0 <HAL_TIM_OC_ConfigChannel>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80003b6:	f000 f97b 	bl	80006b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003ba:	2300      	movs	r3, #0
 80003bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003be:	2300      	movs	r3, #0
 80003c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003c2:	2300      	movs	r3, #0
 80003c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 36;
 80003c6:	2324      	movs	r3, #36	@ 0x24
 80003c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003d2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003d4:	2300      	movs	r3, #0
 80003d6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	4619      	mov	r1, r3
 80003dc:	4807      	ldr	r0, [pc, #28]	@ (80003fc <MX_TIM1_Init+0x16c>)
 80003de:	f002 fa39 	bl	8002854 <HAL_TIMEx_ConfigBreakDeadTime>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 80003e8:	f000 f962 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80003ec:	4803      	ldr	r0, [pc, #12]	@ (80003fc <MX_TIM1_Init+0x16c>)
 80003ee:	f000 f9db 	bl	80007a8 <HAL_TIM_MspPostInit>

}
 80003f2:	bf00      	nop
 80003f4:	3758      	adds	r7, #88	@ 0x58
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	20000028 	.word	0x20000028
 8000400:	40012c00 	.word	0x40012c00

08000404 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b08e      	sub	sp, #56	@ 0x38
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800040a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
 8000418:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800041a:	f107 031c 	add.w	r3, r7, #28
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000424:	463b      	mov	r3, r7
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
 8000430:	611a      	str	r2, [r3, #16]
 8000432:	615a      	str	r2, [r3, #20]
 8000434:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000436:	4b3a      	ldr	r3, [pc, #232]	@ (8000520 <MX_TIM2_Init+0x11c>)
 8000438:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800043c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800043e:	4b38      	ldr	r3, [pc, #224]	@ (8000520 <MX_TIM2_Init+0x11c>)
 8000440:	2200      	movs	r2, #0
 8000442:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000444:	4b36      	ldr	r3, [pc, #216]	@ (8000520 <MX_TIM2_Init+0x11c>)
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 846;
 800044a:	4b35      	ldr	r3, [pc, #212]	@ (8000520 <MX_TIM2_Init+0x11c>)
 800044c:	f240 324e 	movw	r2, #846	@ 0x34e
 8000450:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000452:	4b33      	ldr	r3, [pc, #204]	@ (8000520 <MX_TIM2_Init+0x11c>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000458:	4b31      	ldr	r3, [pc, #196]	@ (8000520 <MX_TIM2_Init+0x11c>)
 800045a:	2200      	movs	r2, #0
 800045c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800045e:	4830      	ldr	r0, [pc, #192]	@ (8000520 <MX_TIM2_Init+0x11c>)
 8000460:	f001 f95a 	bl	8001718 <HAL_TIM_Base_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800046a:	f000 f921 	bl	80006b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800046e:	482c      	ldr	r0, [pc, #176]	@ (8000520 <MX_TIM2_Init+0x11c>)
 8000470:	f001 fa9c 	bl	80019ac <HAL_TIM_PWM_Init>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800047a:	f000 f919 	bl	80006b0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800047e:	4828      	ldr	r0, [pc, #160]	@ (8000520 <MX_TIM2_Init+0x11c>)
 8000480:	f001 f999 	bl	80017b6 <HAL_TIM_OC_Init>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800048a:	f000 f911 	bl	80006b0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800048e:	2306      	movs	r3, #6
 8000490:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000492:	2300      	movs	r3, #0
 8000494:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000496:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800049a:	4619      	mov	r1, r3
 800049c:	4820      	ldr	r0, [pc, #128]	@ (8000520 <MX_TIM2_Init+0x11c>)
 800049e:	f001 fd64 	bl	8001f6a <HAL_TIM_SlaveConfigSynchro>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80004a8:	f000 f902 	bl	80006b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80004ac:	2350      	movs	r3, #80	@ 0x50
 80004ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b0:	2300      	movs	r3, #0
 80004b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004b4:	f107 031c 	add.w	r3, r7, #28
 80004b8:	4619      	mov	r1, r3
 80004ba:	4819      	ldr	r0, [pc, #100]	@ (8000520 <MX_TIM2_Init+0x11c>)
 80004bc:	f002 f96c 	bl	8002798 <HAL_TIMEx_MasterConfigSynchronization>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 80004c6:	f000 f8f3 	bl	80006b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004ca:	2360      	movs	r3, #96	@ 0x60
 80004cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 387;
 80004ce:	f240 1383 	movw	r3, #387	@ 0x183
 80004d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004d4:	2300      	movs	r3, #0
 80004d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004d8:	2300      	movs	r3, #0
 80004da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004dc:	463b      	mov	r3, r7
 80004de:	2200      	movs	r2, #0
 80004e0:	4619      	mov	r1, r3
 80004e2:	480f      	ldr	r0, [pc, #60]	@ (8000520 <MX_TIM2_Init+0x11c>)
 80004e4:	f001 fbb8 	bl	8001c58 <HAL_TIM_PWM_ConfigChannel>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80004ee:	f000 f8df 	bl	80006b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80004f2:	2310      	movs	r3, #16
 80004f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 423;
 80004f6:	f240 13a7 	movw	r3, #423	@ 0x1a7
 80004fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004fc:	463b      	mov	r3, r7
 80004fe:	2204      	movs	r2, #4
 8000500:	4619      	mov	r1, r3
 8000502:	4807      	ldr	r0, [pc, #28]	@ (8000520 <MX_TIM2_Init+0x11c>)
 8000504:	f001 fb4c 	bl	8001ba0 <HAL_TIM_OC_ConfigChannel>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 800050e:	f000 f8cf 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000512:	4803      	ldr	r0, [pc, #12]	@ (8000520 <MX_TIM2_Init+0x11c>)
 8000514:	f000 f948 	bl	80007a8 <HAL_TIM_MspPostInit>

}
 8000518:	bf00      	nop
 800051a:	3738      	adds	r7, #56	@ 0x38
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000070 	.word	0x20000070

08000524 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b08e      	sub	sp, #56	@ 0x38
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800052a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800053a:	f107 031c 	add.w	r3, r7, #28
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000544:	463b      	mov	r3, r7
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]
 8000552:	615a      	str	r2, [r3, #20]
 8000554:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000556:	4b2e      	ldr	r3, [pc, #184]	@ (8000610 <MX_TIM3_Init+0xec>)
 8000558:	4a2e      	ldr	r2, [pc, #184]	@ (8000614 <MX_TIM3_Init+0xf0>)
 800055a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800055c:	4b2c      	ldr	r3, [pc, #176]	@ (8000610 <MX_TIM3_Init+0xec>)
 800055e:	2200      	movs	r2, #0
 8000560:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000562:	4b2b      	ldr	r3, [pc, #172]	@ (8000610 <MX_TIM3_Init+0xec>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 846;
 8000568:	4b29      	ldr	r3, [pc, #164]	@ (8000610 <MX_TIM3_Init+0xec>)
 800056a:	f240 324e 	movw	r2, #846	@ 0x34e
 800056e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000570:	4b27      	ldr	r3, [pc, #156]	@ (8000610 <MX_TIM3_Init+0xec>)
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000576:	4b26      	ldr	r3, [pc, #152]	@ (8000610 <MX_TIM3_Init+0xec>)
 8000578:	2200      	movs	r2, #0
 800057a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800057c:	4824      	ldr	r0, [pc, #144]	@ (8000610 <MX_TIM3_Init+0xec>)
 800057e:	f001 f8cb 	bl	8001718 <HAL_TIM_Base_Init>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000588:	f000 f892 	bl	80006b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800058c:	4820      	ldr	r0, [pc, #128]	@ (8000610 <MX_TIM3_Init+0xec>)
 800058e:	f001 fa0d 	bl	80019ac <HAL_TIM_PWM_Init>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000598:	f000 f88a 	bl	80006b0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800059c:	2306      	movs	r3, #6
 800059e:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80005a0:	2310      	movs	r3, #16
 80005a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80005a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005a8:	4619      	mov	r1, r3
 80005aa:	4819      	ldr	r0, [pc, #100]	@ (8000610 <MX_TIM3_Init+0xec>)
 80005ac:	f001 fcdd 	bl	8001f6a <HAL_TIM_SlaveConfigSynchro>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80005b6:	f000 f87b 	bl	80006b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005be:	2300      	movs	r3, #0
 80005c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	4619      	mov	r1, r3
 80005c8:	4811      	ldr	r0, [pc, #68]	@ (8000610 <MX_TIM3_Init+0xec>)
 80005ca:	f002 f8e5 	bl	8002798 <HAL_TIMEx_MasterConfigSynchronization>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80005d4:	f000 f86c 	bl	80006b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005d8:	2360      	movs	r3, #96	@ 0x60
 80005da:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 387;
 80005dc:	f240 1383 	movw	r3, #387	@ 0x183
 80005e0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005e6:	2300      	movs	r3, #0
 80005e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005ea:	463b      	mov	r3, r7
 80005ec:	2200      	movs	r2, #0
 80005ee:	4619      	mov	r1, r3
 80005f0:	4807      	ldr	r0, [pc, #28]	@ (8000610 <MX_TIM3_Init+0xec>)
 80005f2:	f001 fb31 	bl	8001c58 <HAL_TIM_PWM_ConfigChannel>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 80005fc:	f000 f858 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000600:	4803      	ldr	r0, [pc, #12]	@ (8000610 <MX_TIM3_Init+0xec>)
 8000602:	f000 f8d1 	bl	80007a8 <HAL_TIM_MspPostInit>

}
 8000606:	bf00      	nop
 8000608:	3738      	adds	r7, #56	@ 0x38
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	200000b8 	.word	0x200000b8
 8000614:	40000400 	.word	0x40000400

08000618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	f107 0310 	add.w	r3, r7, #16
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062c:	4b1e      	ldr	r3, [pc, #120]	@ (80006a8 <MX_GPIO_Init+0x90>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a1d      	ldr	r2, [pc, #116]	@ (80006a8 <MX_GPIO_Init+0x90>)
 8000632:	f043 0310 	orr.w	r3, r3, #16
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	4b1b      	ldr	r3, [pc, #108]	@ (80006a8 <MX_GPIO_Init+0x90>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f003 0310 	and.w	r3, r3, #16
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000644:	4b18      	ldr	r3, [pc, #96]	@ (80006a8 <MX_GPIO_Init+0x90>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a17      	ldr	r2, [pc, #92]	@ (80006a8 <MX_GPIO_Init+0x90>)
 800064a:	f043 0320 	orr.w	r3, r3, #32
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b15      	ldr	r3, [pc, #84]	@ (80006a8 <MX_GPIO_Init+0x90>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0320 	and.w	r3, r3, #32
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065c:	4b12      	ldr	r3, [pc, #72]	@ (80006a8 <MX_GPIO_Init+0x90>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a11      	ldr	r2, [pc, #68]	@ (80006a8 <MX_GPIO_Init+0x90>)
 8000662:	f043 0304 	orr.w	r3, r3, #4
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b0f      	ldr	r3, [pc, #60]	@ (80006a8 <MX_GPIO_Init+0x90>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0304 	and.w	r3, r3, #4
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800067a:	480c      	ldr	r0, [pc, #48]	@ (80006ac <MX_GPIO_Init+0x94>)
 800067c:	f000 fc3c 	bl	8000ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000680:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000684:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000686:	2301      	movs	r3, #1
 8000688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068e:	2302      	movs	r3, #2
 8000690:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000692:	f107 0310 	add.w	r3, r7, #16
 8000696:	4619      	mov	r1, r3
 8000698:	4804      	ldr	r0, [pc, #16]	@ (80006ac <MX_GPIO_Init+0x94>)
 800069a:	f000 faa9 	bl	8000bf0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800069e:	bf00      	nop
 80006a0:	3720      	adds	r7, #32
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40011000 	.word	0x40011000

080006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b4:	b672      	cpsid	i
}
 80006b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <Error_Handler+0x8>

080006bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006c2:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <HAL_MspInit+0x5c>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	4a14      	ldr	r2, [pc, #80]	@ (8000718 <HAL_MspInit+0x5c>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6193      	str	r3, [r2, #24]
 80006ce:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <HAL_MspInit+0x5c>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006da:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <HAL_MspInit+0x5c>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	4a0e      	ldr	r2, [pc, #56]	@ (8000718 <HAL_MspInit+0x5c>)
 80006e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e4:	61d3      	str	r3, [r2, #28]
 80006e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <HAL_MspInit+0x5c>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006f2:	4b0a      	ldr	r3, [pc, #40]	@ (800071c <HAL_MspInit+0x60>)
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	4a04      	ldr	r2, [pc, #16]	@ (800071c <HAL_MspInit+0x60>)
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070e:	bf00      	nop
 8000710:	3714      	adds	r7, #20
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr
 8000718:	40021000 	.word	0x40021000
 800071c:	40010000 	.word	0x40010000

08000720 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000720:	b480      	push	{r7}
 8000722:	b087      	sub	sp, #28
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a1b      	ldr	r2, [pc, #108]	@ (800079c <HAL_TIM_Base_MspInit+0x7c>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d10c      	bne.n	800074c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000732:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <HAL_TIM_Base_MspInit+0x80>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	4a1a      	ldr	r2, [pc, #104]	@ (80007a0 <HAL_TIM_Base_MspInit+0x80>)
 8000738:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800073c:	6193      	str	r3, [r2, #24]
 800073e:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <HAL_TIM_Base_MspInit+0x80>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800074a:	e022      	b.n	8000792 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000754:	d10c      	bne.n	8000770 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000756:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <HAL_TIM_Base_MspInit+0x80>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	4a11      	ldr	r2, [pc, #68]	@ (80007a0 <HAL_TIM_Base_MspInit+0x80>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	61d3      	str	r3, [r2, #28]
 8000762:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <HAL_TIM_Base_MspInit+0x80>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
}
 800076e:	e010      	b.n	8000792 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a0b      	ldr	r2, [pc, #44]	@ (80007a4 <HAL_TIM_Base_MspInit+0x84>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d10b      	bne.n	8000792 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <HAL_TIM_Base_MspInit+0x80>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	4a08      	ldr	r2, [pc, #32]	@ (80007a0 <HAL_TIM_Base_MspInit+0x80>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	61d3      	str	r3, [r2, #28]
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <HAL_TIM_Base_MspInit+0x80>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
}
 8000792:	bf00      	nop
 8000794:	371c      	adds	r7, #28
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	40012c00 	.word	0x40012c00
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40000400 	.word	0x40000400

080007a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	@ 0x28
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a37      	ldr	r2, [pc, #220]	@ (80008a0 <HAL_TIM_MspPostInit+0xf8>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d12b      	bne.n	8000820 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c8:	4b36      	ldr	r3, [pc, #216]	@ (80008a4 <HAL_TIM_MspPostInit+0xfc>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a35      	ldr	r2, [pc, #212]	@ (80008a4 <HAL_TIM_MspPostInit+0xfc>)
 80007ce:	f043 0304 	orr.w	r3, r3, #4
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b33      	ldr	r3, [pc, #204]	@ (80008a4 <HAL_TIM_MspPostInit+0xfc>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f003 0304 	and.w	r3, r3, #4
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80007e0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80007e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2302      	movs	r3, #2
 80007ec:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	482c      	ldr	r0, [pc, #176]	@ (80008a8 <HAL_TIM_MspPostInit+0x100>)
 80007f6:	f000 f9fb 	bl	8000bf0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 80007fa:	4b2c      	ldr	r3, [pc, #176]	@ (80008ac <HAL_TIM_MspPostInit+0x104>)
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8000800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000802:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000806:	627b      	str	r3, [r7, #36]	@ 0x24
 8000808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800080a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800080e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000812:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000816:	627b      	str	r3, [r7, #36]	@ 0x24
 8000818:	4a24      	ldr	r2, [pc, #144]	@ (80008ac <HAL_TIM_MspPostInit+0x104>)
 800081a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800081c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800081e:	e03a      	b.n	8000896 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM2)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000828:	d118      	bne.n	800085c <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	4b1e      	ldr	r3, [pc, #120]	@ (80008a4 <HAL_TIM_MspPostInit+0xfc>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	4a1d      	ldr	r2, [pc, #116]	@ (80008a4 <HAL_TIM_MspPostInit+0xfc>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	6193      	str	r3, [r2, #24]
 8000836:	4b1b      	ldr	r3, [pc, #108]	@ (80008a4 <HAL_TIM_MspPostInit+0xfc>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000842:	2301      	movs	r3, #1
 8000844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2302      	movs	r3, #2
 800084c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4814      	ldr	r0, [pc, #80]	@ (80008a8 <HAL_TIM_MspPostInit+0x100>)
 8000856:	f000 f9cb 	bl	8000bf0 <HAL_GPIO_Init>
}
 800085a:	e01c      	b.n	8000896 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a13      	ldr	r2, [pc, #76]	@ (80008b0 <HAL_TIM_MspPostInit+0x108>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d117      	bne.n	8000896 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <HAL_TIM_MspPostInit+0xfc>)
 8000868:	699b      	ldr	r3, [r3, #24]
 800086a:	4a0e      	ldr	r2, [pc, #56]	@ (80008a4 <HAL_TIM_MspPostInit+0xfc>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	6193      	str	r3, [r2, #24]
 8000872:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <HAL_TIM_MspPostInit+0xfc>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800087e:	2340      	movs	r3, #64	@ 0x40
 8000880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2302      	movs	r3, #2
 8000888:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <HAL_TIM_MspPostInit+0x100>)
 8000892:	f000 f9ad 	bl	8000bf0 <HAL_GPIO_Init>
}
 8000896:	bf00      	nop
 8000898:	3728      	adds	r7, #40	@ 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40012c00 	.word	0x40012c00
 80008a4:	40021000 	.word	0x40021000
 80008a8:	40010800 	.word	0x40010800
 80008ac:	40010000 	.word	0x40010000
 80008b0:	40000400 	.word	0x40000400

080008b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <NMI_Handler+0x4>

080008bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <HardFault_Handler+0x4>

080008c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <MemManage_Handler+0x4>

080008cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <BusFault_Handler+0x4>

080008d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <UsageFault_Handler+0x4>

080008dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr

080008f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000904:	f000 f874 	bl	80009f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}

0800090c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000918:	f7ff fff8 	bl	800090c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800091c:	480b      	ldr	r0, [pc, #44]	@ (800094c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800091e:	490c      	ldr	r1, [pc, #48]	@ (8000950 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000920:	4a0c      	ldr	r2, [pc, #48]	@ (8000954 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000924:	e002      	b.n	800092c <LoopCopyDataInit>

08000926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092a:	3304      	adds	r3, #4

0800092c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800092c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000930:	d3f9      	bcc.n	8000926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000932:	4a09      	ldr	r2, [pc, #36]	@ (8000958 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000934:	4c09      	ldr	r4, [pc, #36]	@ (800095c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000938:	e001      	b.n	800093e <LoopFillZerobss>

0800093a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800093c:	3204      	adds	r2, #4

0800093e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000940:	d3fb      	bcc.n	800093a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000942:	f002 f805 	bl	8002950 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000946:	f7ff fc01 	bl	800014c <main>
  bx lr
 800094a:	4770      	bx	lr
  ldr r0, =_sdata
 800094c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000950:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000954:	080029dc 	.word	0x080029dc
  ldr r2, =_sbss
 8000958:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800095c:	20000108 	.word	0x20000108

08000960 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000960:	e7fe      	b.n	8000960 <ADC1_2_IRQHandler>
	...

08000964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000968:	4b08      	ldr	r3, [pc, #32]	@ (800098c <HAL_Init+0x28>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a07      	ldr	r2, [pc, #28]	@ (800098c <HAL_Init+0x28>)
 800096e:	f043 0310 	orr.w	r3, r3, #16
 8000972:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000974:	2003      	movs	r0, #3
 8000976:	f000 f907 	bl	8000b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800097a:	200f      	movs	r0, #15
 800097c:	f000 f808 	bl	8000990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000980:	f7ff fe9c 	bl	80006bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40022000 	.word	0x40022000

08000990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000998:	4b12      	ldr	r3, [pc, #72]	@ (80009e4 <HAL_InitTick+0x54>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4b12      	ldr	r3, [pc, #72]	@ (80009e8 <HAL_InitTick+0x58>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	4619      	mov	r1, r3
 80009a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 f911 	bl	8000bd6 <HAL_SYSTICK_Config>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	e00e      	b.n	80009dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2b0f      	cmp	r3, #15
 80009c2:	d80a      	bhi.n	80009da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c4:	2200      	movs	r2, #0
 80009c6:	6879      	ldr	r1, [r7, #4]
 80009c8:	f04f 30ff 	mov.w	r0, #4294967295
 80009cc:	f000 f8e7 	bl	8000b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d0:	4a06      	ldr	r2, [pc, #24]	@ (80009ec <HAL_InitTick+0x5c>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009d6:	2300      	movs	r3, #0
 80009d8:	e000      	b.n	80009dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000000 	.word	0x20000000
 80009e8:	20000008 	.word	0x20000008
 80009ec:	20000004 	.word	0x20000004

080009f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f4:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <HAL_IncTick+0x1c>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	461a      	mov	r2, r3
 80009fa:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <HAL_IncTick+0x20>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4413      	add	r3, r2
 8000a00:	4a03      	ldr	r2, [pc, #12]	@ (8000a10 <HAL_IncTick+0x20>)
 8000a02:	6013      	str	r3, [r2, #0]
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	20000008 	.word	0x20000008
 8000a10:	20000104 	.word	0x20000104

08000a14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  return uwTick;
 8000a18:	4b02      	ldr	r3, [pc, #8]	@ (8000a24 <HAL_GetTick+0x10>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	20000104 	.word	0x20000104

08000a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a38:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <__NVIC_SetPriorityGrouping+0x44>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a44:	4013      	ands	r3, r2
 8000a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5a:	4a04      	ldr	r2, [pc, #16]	@ (8000a6c <__NVIC_SetPriorityGrouping+0x44>)
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	60d3      	str	r3, [r2, #12]
}
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a74:	4b04      	ldr	r3, [pc, #16]	@ (8000a88 <__NVIC_GetPriorityGrouping+0x18>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	0a1b      	lsrs	r3, r3, #8
 8000a7a:	f003 0307 	and.w	r3, r3, #7
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	6039      	str	r1, [r7, #0]
 8000a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	db0a      	blt.n	8000ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	490c      	ldr	r1, [pc, #48]	@ (8000ad8 <__NVIC_SetPriority+0x4c>)
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	0112      	lsls	r2, r2, #4
 8000aac:	b2d2      	uxtb	r2, r2
 8000aae:	440b      	add	r3, r1
 8000ab0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab4:	e00a      	b.n	8000acc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4908      	ldr	r1, [pc, #32]	@ (8000adc <__NVIC_SetPriority+0x50>)
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	f003 030f 	and.w	r3, r3, #15
 8000ac2:	3b04      	subs	r3, #4
 8000ac4:	0112      	lsls	r2, r2, #4
 8000ac6:	b2d2      	uxtb	r2, r2
 8000ac8:	440b      	add	r3, r1
 8000aca:	761a      	strb	r2, [r3, #24]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000e100 	.word	0xe000e100
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b089      	sub	sp, #36	@ 0x24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	f1c3 0307 	rsb	r3, r3, #7
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	bf28      	it	cs
 8000afe:	2304      	movcs	r3, #4
 8000b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3304      	adds	r3, #4
 8000b06:	2b06      	cmp	r3, #6
 8000b08:	d902      	bls.n	8000b10 <NVIC_EncodePriority+0x30>
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3b03      	subs	r3, #3
 8000b0e:	e000      	b.n	8000b12 <NVIC_EncodePriority+0x32>
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	f04f 32ff 	mov.w	r2, #4294967295
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43da      	mvns	r2, r3
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	401a      	ands	r2, r3
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b28:	f04f 31ff 	mov.w	r1, #4294967295
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b32:	43d9      	mvns	r1, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	4313      	orrs	r3, r2
         );
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3724      	adds	r7, #36	@ 0x24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b54:	d301      	bcc.n	8000b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00f      	b.n	8000b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b84 <SysTick_Config+0x40>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b62:	210f      	movs	r1, #15
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	f7ff ff90 	bl	8000a8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b6c:	4b05      	ldr	r3, [pc, #20]	@ (8000b84 <SysTick_Config+0x40>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b72:	4b04      	ldr	r3, [pc, #16]	@ (8000b84 <SysTick_Config+0x40>)
 8000b74:	2207      	movs	r2, #7
 8000b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	e000e010 	.word	0xe000e010

08000b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ff49 	bl	8000a28 <__NVIC_SetPriorityGrouping>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b086      	sub	sp, #24
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
 8000baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb0:	f7ff ff5e 	bl	8000a70 <__NVIC_GetPriorityGrouping>
 8000bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	68b9      	ldr	r1, [r7, #8]
 8000bba:	6978      	ldr	r0, [r7, #20]
 8000bbc:	f7ff ff90 	bl	8000ae0 <NVIC_EncodePriority>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff5f 	bl	8000a8c <__NVIC_SetPriority>
}
 8000bce:	bf00      	nop
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff ffb0 	bl	8000b44 <SysTick_Config>
 8000be4:	4603      	mov	r3, r0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b08b      	sub	sp, #44	@ 0x2c
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c02:	e169      	b.n	8000ed8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c04:	2201      	movs	r2, #1
 8000c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	69fa      	ldr	r2, [r7, #28]
 8000c14:	4013      	ands	r3, r2
 8000c16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	f040 8158 	bne.w	8000ed2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	4a9a      	ldr	r2, [pc, #616]	@ (8000e90 <HAL_GPIO_Init+0x2a0>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d05e      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c2c:	4a98      	ldr	r2, [pc, #608]	@ (8000e90 <HAL_GPIO_Init+0x2a0>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d875      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c32:	4a98      	ldr	r2, [pc, #608]	@ (8000e94 <HAL_GPIO_Init+0x2a4>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d058      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c38:	4a96      	ldr	r2, [pc, #600]	@ (8000e94 <HAL_GPIO_Init+0x2a4>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d86f      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c3e:	4a96      	ldr	r2, [pc, #600]	@ (8000e98 <HAL_GPIO_Init+0x2a8>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d052      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c44:	4a94      	ldr	r2, [pc, #592]	@ (8000e98 <HAL_GPIO_Init+0x2a8>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d869      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c4a:	4a94      	ldr	r2, [pc, #592]	@ (8000e9c <HAL_GPIO_Init+0x2ac>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d04c      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c50:	4a92      	ldr	r2, [pc, #584]	@ (8000e9c <HAL_GPIO_Init+0x2ac>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d863      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c56:	4a92      	ldr	r2, [pc, #584]	@ (8000ea0 <HAL_GPIO_Init+0x2b0>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d046      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c5c:	4a90      	ldr	r2, [pc, #576]	@ (8000ea0 <HAL_GPIO_Init+0x2b0>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d85d      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c62:	2b12      	cmp	r3, #18
 8000c64:	d82a      	bhi.n	8000cbc <HAL_GPIO_Init+0xcc>
 8000c66:	2b12      	cmp	r3, #18
 8000c68:	d859      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c70 <HAL_GPIO_Init+0x80>)
 8000c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c70:	08000ceb 	.word	0x08000ceb
 8000c74:	08000cc5 	.word	0x08000cc5
 8000c78:	08000cd7 	.word	0x08000cd7
 8000c7c:	08000d19 	.word	0x08000d19
 8000c80:	08000d1f 	.word	0x08000d1f
 8000c84:	08000d1f 	.word	0x08000d1f
 8000c88:	08000d1f 	.word	0x08000d1f
 8000c8c:	08000d1f 	.word	0x08000d1f
 8000c90:	08000d1f 	.word	0x08000d1f
 8000c94:	08000d1f 	.word	0x08000d1f
 8000c98:	08000d1f 	.word	0x08000d1f
 8000c9c:	08000d1f 	.word	0x08000d1f
 8000ca0:	08000d1f 	.word	0x08000d1f
 8000ca4:	08000d1f 	.word	0x08000d1f
 8000ca8:	08000d1f 	.word	0x08000d1f
 8000cac:	08000d1f 	.word	0x08000d1f
 8000cb0:	08000d1f 	.word	0x08000d1f
 8000cb4:	08000ccd 	.word	0x08000ccd
 8000cb8:	08000ce1 	.word	0x08000ce1
 8000cbc:	4a79      	ldr	r2, [pc, #484]	@ (8000ea4 <HAL_GPIO_Init+0x2b4>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d013      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cc2:	e02c      	b.n	8000d1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	623b      	str	r3, [r7, #32]
          break;
 8000cca:	e029      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	623b      	str	r3, [r7, #32]
          break;
 8000cd4:	e024      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	3308      	adds	r3, #8
 8000cdc:	623b      	str	r3, [r7, #32]
          break;
 8000cde:	e01f      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	330c      	adds	r3, #12
 8000ce6:	623b      	str	r3, [r7, #32]
          break;
 8000ce8:	e01a      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d102      	bne.n	8000cf8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	623b      	str	r3, [r7, #32]
          break;
 8000cf6:	e013      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d105      	bne.n	8000d0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d00:	2308      	movs	r3, #8
 8000d02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69fa      	ldr	r2, [r7, #28]
 8000d08:	611a      	str	r2, [r3, #16]
          break;
 8000d0a:	e009      	b.n	8000d20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d0c:	2308      	movs	r3, #8
 8000d0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	69fa      	ldr	r2, [r7, #28]
 8000d14:	615a      	str	r2, [r3, #20]
          break;
 8000d16:	e003      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
          break;
 8000d1c:	e000      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          break;
 8000d1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	2bff      	cmp	r3, #255	@ 0xff
 8000d24:	d801      	bhi.n	8000d2a <HAL_GPIO_Init+0x13a>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	e001      	b.n	8000d2e <HAL_GPIO_Init+0x13e>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	2bff      	cmp	r3, #255	@ 0xff
 8000d34:	d802      	bhi.n	8000d3c <HAL_GPIO_Init+0x14c>
 8000d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	e002      	b.n	8000d42 <HAL_GPIO_Init+0x152>
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d3e:	3b08      	subs	r3, #8
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	210f      	movs	r1, #15
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	401a      	ands	r2, r3
 8000d54:	6a39      	ldr	r1, [r7, #32]
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f000 80b1 	beq.w	8000ed2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d70:	4b4d      	ldr	r3, [pc, #308]	@ (8000ea8 <HAL_GPIO_Init+0x2b8>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	4a4c      	ldr	r2, [pc, #304]	@ (8000ea8 <HAL_GPIO_Init+0x2b8>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	6193      	str	r3, [r2, #24]
 8000d7c:	4b4a      	ldr	r3, [pc, #296]	@ (8000ea8 <HAL_GPIO_Init+0x2b8>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d88:	4a48      	ldr	r2, [pc, #288]	@ (8000eac <HAL_GPIO_Init+0x2bc>)
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d8c:	089b      	lsrs	r3, r3, #2
 8000d8e:	3302      	adds	r3, #2
 8000d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d98:	f003 0303 	and.w	r3, r3, #3
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	220f      	movs	r2, #15
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	4013      	ands	r3, r2
 8000daa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a40      	ldr	r2, [pc, #256]	@ (8000eb0 <HAL_GPIO_Init+0x2c0>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d013      	beq.n	8000ddc <HAL_GPIO_Init+0x1ec>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a3f      	ldr	r2, [pc, #252]	@ (8000eb4 <HAL_GPIO_Init+0x2c4>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d00d      	beq.n	8000dd8 <HAL_GPIO_Init+0x1e8>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a3e      	ldr	r2, [pc, #248]	@ (8000eb8 <HAL_GPIO_Init+0x2c8>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d007      	beq.n	8000dd4 <HAL_GPIO_Init+0x1e4>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a3d      	ldr	r2, [pc, #244]	@ (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d101      	bne.n	8000dd0 <HAL_GPIO_Init+0x1e0>
 8000dcc:	2303      	movs	r3, #3
 8000dce:	e006      	b.n	8000dde <HAL_GPIO_Init+0x1ee>
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	e004      	b.n	8000dde <HAL_GPIO_Init+0x1ee>
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	e002      	b.n	8000dde <HAL_GPIO_Init+0x1ee>
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e000      	b.n	8000dde <HAL_GPIO_Init+0x1ee>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000de0:	f002 0203 	and.w	r2, r2, #3
 8000de4:	0092      	lsls	r2, r2, #2
 8000de6:	4093      	lsls	r3, r2
 8000de8:	68fa      	ldr	r2, [r7, #12]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dee:	492f      	ldr	r1, [pc, #188]	@ (8000eac <HAL_GPIO_Init+0x2bc>)
 8000df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df2:	089b      	lsrs	r3, r3, #2
 8000df4:	3302      	adds	r3, #2
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d006      	beq.n	8000e16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e08:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	492c      	ldr	r1, [pc, #176]	@ (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	608b      	str	r3, [r1, #8]
 8000e14:	e006      	b.n	8000e24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e16:	4b2a      	ldr	r3, [pc, #168]	@ (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e18:	689a      	ldr	r2, [r3, #8]
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	4928      	ldr	r1, [pc, #160]	@ (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e20:	4013      	ands	r3, r2
 8000e22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d006      	beq.n	8000e3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e30:	4b23      	ldr	r3, [pc, #140]	@ (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e32:	68da      	ldr	r2, [r3, #12]
 8000e34:	4922      	ldr	r1, [pc, #136]	@ (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	60cb      	str	r3, [r1, #12]
 8000e3c:	e006      	b.n	8000e4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e3e:	4b20      	ldr	r3, [pc, #128]	@ (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e40:	68da      	ldr	r2, [r3, #12]
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	491e      	ldr	r1, [pc, #120]	@ (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d006      	beq.n	8000e66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e58:	4b19      	ldr	r3, [pc, #100]	@ (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	4918      	ldr	r1, [pc, #96]	@ (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	604b      	str	r3, [r1, #4]
 8000e64:	e006      	b.n	8000e74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e66:	4b16      	ldr	r3, [pc, #88]	@ (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	4914      	ldr	r1, [pc, #80]	@ (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e70:	4013      	ands	r3, r2
 8000e72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d021      	beq.n	8000ec4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e80:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	490e      	ldr	r1, [pc, #56]	@ (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	600b      	str	r3, [r1, #0]
 8000e8c:	e021      	b.n	8000ed2 <HAL_GPIO_Init+0x2e2>
 8000e8e:	bf00      	nop
 8000e90:	10320000 	.word	0x10320000
 8000e94:	10310000 	.word	0x10310000
 8000e98:	10220000 	.word	0x10220000
 8000e9c:	10210000 	.word	0x10210000
 8000ea0:	10120000 	.word	0x10120000
 8000ea4:	10110000 	.word	0x10110000
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40010000 	.word	0x40010000
 8000eb0:	40010800 	.word	0x40010800
 8000eb4:	40010c00 	.word	0x40010c00
 8000eb8:	40011000 	.word	0x40011000
 8000ebc:	40011400 	.word	0x40011400
 8000ec0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <HAL_GPIO_Init+0x304>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	4909      	ldr	r1, [pc, #36]	@ (8000ef4 <HAL_GPIO_Init+0x304>)
 8000ece:	4013      	ands	r3, r2
 8000ed0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ede:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f47f ae8e 	bne.w	8000c04 <HAL_GPIO_Init+0x14>
  }
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	372c      	adds	r7, #44	@ 0x2c
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	40010400 	.word	0x40010400

08000ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	807b      	strh	r3, [r7, #2]
 8000f04:	4613      	mov	r3, r2
 8000f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f08:	787b      	ldrb	r3, [r7, #1]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f0e:	887a      	ldrh	r2, [r7, #2]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f14:	e003      	b.n	8000f1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f16:	887b      	ldrh	r3, [r7, #2]
 8000f18:	041a      	lsls	r2, r3, #16
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	611a      	str	r2, [r3, #16]
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f3a:	887a      	ldrh	r2, [r7, #2]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	041a      	lsls	r2, r3, #16
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	43d9      	mvns	r1, r3
 8000f46:	887b      	ldrh	r3, [r7, #2]
 8000f48:	400b      	ands	r3, r1
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	611a      	str	r2, [r3, #16]
}
 8000f50:	bf00      	nop
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
	...

08000f5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e272      	b.n	8001454 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 8087 	beq.w	800108a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f7c:	4b92      	ldr	r3, [pc, #584]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 030c 	and.w	r3, r3, #12
 8000f84:	2b04      	cmp	r3, #4
 8000f86:	d00c      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f88:	4b8f      	ldr	r3, [pc, #572]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 030c 	and.w	r3, r3, #12
 8000f90:	2b08      	cmp	r3, #8
 8000f92:	d112      	bne.n	8000fba <HAL_RCC_OscConfig+0x5e>
 8000f94:	4b8c      	ldr	r3, [pc, #560]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fa0:	d10b      	bne.n	8000fba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa2:	4b89      	ldr	r3, [pc, #548]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d06c      	beq.n	8001088 <HAL_RCC_OscConfig+0x12c>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d168      	bne.n	8001088 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e24c      	b.n	8001454 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fc2:	d106      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x76>
 8000fc4:	4b80      	ldr	r3, [pc, #512]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a7f      	ldr	r2, [pc, #508]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 8000fca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	e02e      	b.n	8001030 <HAL_RCC_OscConfig+0xd4>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d10c      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x98>
 8000fda:	4b7b      	ldr	r3, [pc, #492]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a7a      	ldr	r2, [pc, #488]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	4b78      	ldr	r3, [pc, #480]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a77      	ldr	r2, [pc, #476]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	e01d      	b.n	8001030 <HAL_RCC_OscConfig+0xd4>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ffc:	d10c      	bne.n	8001018 <HAL_RCC_OscConfig+0xbc>
 8000ffe:	4b72      	ldr	r3, [pc, #456]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a71      	ldr	r2, [pc, #452]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 8001004:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	4b6f      	ldr	r3, [pc, #444]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a6e      	ldr	r2, [pc, #440]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 8001010:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001014:	6013      	str	r3, [r2, #0]
 8001016:	e00b      	b.n	8001030 <HAL_RCC_OscConfig+0xd4>
 8001018:	4b6b      	ldr	r3, [pc, #428]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a6a      	ldr	r2, [pc, #424]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 800101e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	4b68      	ldr	r3, [pc, #416]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a67      	ldr	r2, [pc, #412]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 800102a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800102e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d013      	beq.n	8001060 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001038:	f7ff fcec 	bl	8000a14 <HAL_GetTick>
 800103c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800103e:	e008      	b.n	8001052 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001040:	f7ff fce8 	bl	8000a14 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b64      	cmp	r3, #100	@ 0x64
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e200      	b.n	8001454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001052:	4b5d      	ldr	r3, [pc, #372]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0f0      	beq.n	8001040 <HAL_RCC_OscConfig+0xe4>
 800105e:	e014      	b.n	800108a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001060:	f7ff fcd8 	bl	8000a14 <HAL_GetTick>
 8001064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001066:	e008      	b.n	800107a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001068:	f7ff fcd4 	bl	8000a14 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b64      	cmp	r3, #100	@ 0x64
 8001074:	d901      	bls.n	800107a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e1ec      	b.n	8001454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800107a:	4b53      	ldr	r3, [pc, #332]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1f0      	bne.n	8001068 <HAL_RCC_OscConfig+0x10c>
 8001086:	e000      	b.n	800108a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d063      	beq.n	800115e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001096:	4b4c      	ldr	r3, [pc, #304]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 030c 	and.w	r3, r3, #12
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d00b      	beq.n	80010ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010a2:	4b49      	ldr	r3, [pc, #292]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 030c 	and.w	r3, r3, #12
 80010aa:	2b08      	cmp	r3, #8
 80010ac:	d11c      	bne.n	80010e8 <HAL_RCC_OscConfig+0x18c>
 80010ae:	4b46      	ldr	r3, [pc, #280]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d116      	bne.n	80010e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ba:	4b43      	ldr	r3, [pc, #268]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d005      	beq.n	80010d2 <HAL_RCC_OscConfig+0x176>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d001      	beq.n	80010d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e1c0      	b.n	8001454 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d2:	4b3d      	ldr	r3, [pc, #244]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	4939      	ldr	r1, [pc, #228]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 80010e2:	4313      	orrs	r3, r2
 80010e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e6:	e03a      	b.n	800115e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d020      	beq.n	8001132 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010f0:	4b36      	ldr	r3, [pc, #216]	@ (80011cc <HAL_RCC_OscConfig+0x270>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f6:	f7ff fc8d 	bl	8000a14 <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010fc:	e008      	b.n	8001110 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010fe:	f7ff fc89 	bl	8000a14 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e1a1      	b.n	8001454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001110:	4b2d      	ldr	r3, [pc, #180]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0f0      	beq.n	80010fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800111c:	4b2a      	ldr	r3, [pc, #168]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	4927      	ldr	r1, [pc, #156]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 800112c:	4313      	orrs	r3, r2
 800112e:	600b      	str	r3, [r1, #0]
 8001130:	e015      	b.n	800115e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001132:	4b26      	ldr	r3, [pc, #152]	@ (80011cc <HAL_RCC_OscConfig+0x270>)
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001138:	f7ff fc6c 	bl	8000a14 <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800113e:	e008      	b.n	8001152 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001140:	f7ff fc68 	bl	8000a14 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e180      	b.n	8001454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001152:	4b1d      	ldr	r3, [pc, #116]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1f0      	bne.n	8001140 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0308 	and.w	r3, r3, #8
 8001166:	2b00      	cmp	r3, #0
 8001168:	d03a      	beq.n	80011e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d019      	beq.n	80011a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001172:	4b17      	ldr	r3, [pc, #92]	@ (80011d0 <HAL_RCC_OscConfig+0x274>)
 8001174:	2201      	movs	r2, #1
 8001176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001178:	f7ff fc4c 	bl	8000a14 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001180:	f7ff fc48 	bl	8000a14 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e160      	b.n	8001454 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001192:	4b0d      	ldr	r3, [pc, #52]	@ (80011c8 <HAL_RCC_OscConfig+0x26c>)
 8001194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0f0      	beq.n	8001180 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800119e:	2001      	movs	r0, #1
 80011a0:	f000 fa9c 	bl	80016dc <RCC_Delay>
 80011a4:	e01c      	b.n	80011e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011a6:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <HAL_RCC_OscConfig+0x274>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ac:	f7ff fc32 	bl	8000a14 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b2:	e00f      	b.n	80011d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011b4:	f7ff fc2e 	bl	8000a14 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d908      	bls.n	80011d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e146      	b.n	8001454 <HAL_RCC_OscConfig+0x4f8>
 80011c6:	bf00      	nop
 80011c8:	40021000 	.word	0x40021000
 80011cc:	42420000 	.word	0x42420000
 80011d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d4:	4b92      	ldr	r3, [pc, #584]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 80011d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1e9      	bne.n	80011b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f000 80a6 	beq.w	800133a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ee:	2300      	movs	r3, #0
 80011f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011f2:	4b8b      	ldr	r3, [pc, #556]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10d      	bne.n	800121a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011fe:	4b88      	ldr	r3, [pc, #544]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	4a87      	ldr	r2, [pc, #540]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 8001204:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001208:	61d3      	str	r3, [r2, #28]
 800120a:	4b85      	ldr	r3, [pc, #532]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001216:	2301      	movs	r3, #1
 8001218:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800121a:	4b82      	ldr	r3, [pc, #520]	@ (8001424 <HAL_RCC_OscConfig+0x4c8>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001222:	2b00      	cmp	r3, #0
 8001224:	d118      	bne.n	8001258 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001226:	4b7f      	ldr	r3, [pc, #508]	@ (8001424 <HAL_RCC_OscConfig+0x4c8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a7e      	ldr	r2, [pc, #504]	@ (8001424 <HAL_RCC_OscConfig+0x4c8>)
 800122c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001232:	f7ff fbef 	bl	8000a14 <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001238:	e008      	b.n	800124c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800123a:	f7ff fbeb 	bl	8000a14 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b64      	cmp	r3, #100	@ 0x64
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e103      	b.n	8001454 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800124c:	4b75      	ldr	r3, [pc, #468]	@ (8001424 <HAL_RCC_OscConfig+0x4c8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001254:	2b00      	cmp	r3, #0
 8001256:	d0f0      	beq.n	800123a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d106      	bne.n	800126e <HAL_RCC_OscConfig+0x312>
 8001260:	4b6f      	ldr	r3, [pc, #444]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	4a6e      	ldr	r2, [pc, #440]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6213      	str	r3, [r2, #32]
 800126c:	e02d      	b.n	80012ca <HAL_RCC_OscConfig+0x36e>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10c      	bne.n	8001290 <HAL_RCC_OscConfig+0x334>
 8001276:	4b6a      	ldr	r3, [pc, #424]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	4a69      	ldr	r2, [pc, #420]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 800127c:	f023 0301 	bic.w	r3, r3, #1
 8001280:	6213      	str	r3, [r2, #32]
 8001282:	4b67      	ldr	r3, [pc, #412]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 8001284:	6a1b      	ldr	r3, [r3, #32]
 8001286:	4a66      	ldr	r2, [pc, #408]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 8001288:	f023 0304 	bic.w	r3, r3, #4
 800128c:	6213      	str	r3, [r2, #32]
 800128e:	e01c      	b.n	80012ca <HAL_RCC_OscConfig+0x36e>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	2b05      	cmp	r3, #5
 8001296:	d10c      	bne.n	80012b2 <HAL_RCC_OscConfig+0x356>
 8001298:	4b61      	ldr	r3, [pc, #388]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	4a60      	ldr	r2, [pc, #384]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 800129e:	f043 0304 	orr.w	r3, r3, #4
 80012a2:	6213      	str	r3, [r2, #32]
 80012a4:	4b5e      	ldr	r3, [pc, #376]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	4a5d      	ldr	r2, [pc, #372]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	6213      	str	r3, [r2, #32]
 80012b0:	e00b      	b.n	80012ca <HAL_RCC_OscConfig+0x36e>
 80012b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	4a5a      	ldr	r2, [pc, #360]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 80012b8:	f023 0301 	bic.w	r3, r3, #1
 80012bc:	6213      	str	r3, [r2, #32]
 80012be:	4b58      	ldr	r3, [pc, #352]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	4a57      	ldr	r2, [pc, #348]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 80012c4:	f023 0304 	bic.w	r3, r3, #4
 80012c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d015      	beq.n	80012fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d2:	f7ff fb9f 	bl	8000a14 <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d8:	e00a      	b.n	80012f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012da:	f7ff fb9b 	bl	8000a14 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e0b1      	b.n	8001454 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012f0:	4b4b      	ldr	r3, [pc, #300]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0ee      	beq.n	80012da <HAL_RCC_OscConfig+0x37e>
 80012fc:	e014      	b.n	8001328 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fe:	f7ff fb89 	bl	8000a14 <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001304:	e00a      	b.n	800131c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001306:	f7ff fb85 	bl	8000a14 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001314:	4293      	cmp	r3, r2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e09b      	b.n	8001454 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800131c:	4b40      	ldr	r3, [pc, #256]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1ee      	bne.n	8001306 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001328:	7dfb      	ldrb	r3, [r7, #23]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d105      	bne.n	800133a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800132e:	4b3c      	ldr	r3, [pc, #240]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	4a3b      	ldr	r2, [pc, #236]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 8001334:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001338:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 8087 	beq.w	8001452 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001344:	4b36      	ldr	r3, [pc, #216]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 030c 	and.w	r3, r3, #12
 800134c:	2b08      	cmp	r3, #8
 800134e:	d061      	beq.n	8001414 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	2b02      	cmp	r3, #2
 8001356:	d146      	bne.n	80013e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001358:	4b33      	ldr	r3, [pc, #204]	@ (8001428 <HAL_RCC_OscConfig+0x4cc>)
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135e:	f7ff fb59 	bl	8000a14 <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001364:	e008      	b.n	8001378 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001366:	f7ff fb55 	bl	8000a14 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e06d      	b.n	8001454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001378:	4b29      	ldr	r3, [pc, #164]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1f0      	bne.n	8001366 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800138c:	d108      	bne.n	80013a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800138e:	4b24      	ldr	r3, [pc, #144]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	4921      	ldr	r1, [pc, #132]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 800139c:	4313      	orrs	r3, r2
 800139e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a19      	ldr	r1, [r3, #32]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b0:	430b      	orrs	r3, r1
 80013b2:	491b      	ldr	r1, [pc, #108]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001428 <HAL_RCC_OscConfig+0x4cc>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013be:	f7ff fb29 	bl	8000a14 <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c6:	f7ff fb25 	bl	8000a14 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e03d      	b.n	8001454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013d8:	4b11      	ldr	r3, [pc, #68]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0f0      	beq.n	80013c6 <HAL_RCC_OscConfig+0x46a>
 80013e4:	e035      	b.n	8001452 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e6:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <HAL_RCC_OscConfig+0x4cc>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ec:	f7ff fb12 	bl	8000a14 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f4:	f7ff fb0e 	bl	8000a14 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e026      	b.n	8001454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001406:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <HAL_RCC_OscConfig+0x4c4>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f0      	bne.n	80013f4 <HAL_RCC_OscConfig+0x498>
 8001412:	e01e      	b.n	8001452 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d107      	bne.n	800142c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e019      	b.n	8001454 <HAL_RCC_OscConfig+0x4f8>
 8001420:	40021000 	.word	0x40021000
 8001424:	40007000 	.word	0x40007000
 8001428:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800142c:	4b0b      	ldr	r3, [pc, #44]	@ (800145c <HAL_RCC_OscConfig+0x500>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	429a      	cmp	r2, r3
 800143e:	d106      	bne.n	800144e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800144a:	429a      	cmp	r2, r3
 800144c:	d001      	beq.n	8001452 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e000      	b.n	8001454 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40021000 	.word	0x40021000

08001460 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e0d0      	b.n	8001616 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001474:	4b6a      	ldr	r3, [pc, #424]	@ (8001620 <HAL_RCC_ClockConfig+0x1c0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	429a      	cmp	r2, r3
 8001480:	d910      	bls.n	80014a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001482:	4b67      	ldr	r3, [pc, #412]	@ (8001620 <HAL_RCC_ClockConfig+0x1c0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f023 0207 	bic.w	r2, r3, #7
 800148a:	4965      	ldr	r1, [pc, #404]	@ (8001620 <HAL_RCC_ClockConfig+0x1c0>)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	4313      	orrs	r3, r2
 8001490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001492:	4b63      	ldr	r3, [pc, #396]	@ (8001620 <HAL_RCC_ClockConfig+0x1c0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	429a      	cmp	r2, r3
 800149e:	d001      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e0b8      	b.n	8001616 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d020      	beq.n	80014f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014bc:	4b59      	ldr	r3, [pc, #356]	@ (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	4a58      	ldr	r2, [pc, #352]	@ (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 80014c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80014c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0308 	and.w	r3, r3, #8
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d005      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014d4:	4b53      	ldr	r3, [pc, #332]	@ (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	4a52      	ldr	r2, [pc, #328]	@ (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 80014da:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80014de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014e0:	4b50      	ldr	r3, [pc, #320]	@ (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	494d      	ldr	r1, [pc, #308]	@ (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d040      	beq.n	8001580 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d107      	bne.n	8001516 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001506:	4b47      	ldr	r3, [pc, #284]	@ (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d115      	bne.n	800153e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e07f      	b.n	8001616 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b02      	cmp	r3, #2
 800151c:	d107      	bne.n	800152e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800151e:	4b41      	ldr	r3, [pc, #260]	@ (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d109      	bne.n	800153e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e073      	b.n	8001616 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152e:	4b3d      	ldr	r3, [pc, #244]	@ (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e06b      	b.n	8001616 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800153e:	4b39      	ldr	r3, [pc, #228]	@ (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f023 0203 	bic.w	r2, r3, #3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	4936      	ldr	r1, [pc, #216]	@ (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 800154c:	4313      	orrs	r3, r2
 800154e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001550:	f7ff fa60 	bl	8000a14 <HAL_GetTick>
 8001554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001556:	e00a      	b.n	800156e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001558:	f7ff fa5c 	bl	8000a14 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001566:	4293      	cmp	r3, r2
 8001568:	d901      	bls.n	800156e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e053      	b.n	8001616 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156e:	4b2d      	ldr	r3, [pc, #180]	@ (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 020c 	and.w	r2, r3, #12
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	429a      	cmp	r2, r3
 800157e:	d1eb      	bne.n	8001558 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001580:	4b27      	ldr	r3, [pc, #156]	@ (8001620 <HAL_RCC_ClockConfig+0x1c0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0307 	and.w	r3, r3, #7
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	429a      	cmp	r2, r3
 800158c:	d210      	bcs.n	80015b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158e:	4b24      	ldr	r3, [pc, #144]	@ (8001620 <HAL_RCC_ClockConfig+0x1c0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f023 0207 	bic.w	r2, r3, #7
 8001596:	4922      	ldr	r1, [pc, #136]	@ (8001620 <HAL_RCC_ClockConfig+0x1c0>)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	4313      	orrs	r3, r2
 800159c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800159e:	4b20      	ldr	r3, [pc, #128]	@ (8001620 <HAL_RCC_ClockConfig+0x1c0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d001      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e032      	b.n	8001616 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d008      	beq.n	80015ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015bc:	4b19      	ldr	r3, [pc, #100]	@ (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	4916      	ldr	r1, [pc, #88]	@ (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d009      	beq.n	80015ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015da:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	490e      	ldr	r1, [pc, #56]	@ (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015ee:	f000 f821 	bl	8001634 <HAL_RCC_GetSysClockFreq>
 80015f2:	4602      	mov	r2, r0
 80015f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	091b      	lsrs	r3, r3, #4
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	490a      	ldr	r1, [pc, #40]	@ (8001628 <HAL_RCC_ClockConfig+0x1c8>)
 8001600:	5ccb      	ldrb	r3, [r1, r3]
 8001602:	fa22 f303 	lsr.w	r3, r2, r3
 8001606:	4a09      	ldr	r2, [pc, #36]	@ (800162c <HAL_RCC_ClockConfig+0x1cc>)
 8001608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800160a:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <HAL_RCC_ClockConfig+0x1d0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff f9be 	bl	8000990 <HAL_InitTick>

  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40022000 	.word	0x40022000
 8001624:	40021000 	.word	0x40021000
 8001628:	080029b0 	.word	0x080029b0
 800162c:	20000000 	.word	0x20000000
 8001630:	20000004 	.word	0x20000004

08001634 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001634:	b480      	push	{r7}
 8001636:	b087      	sub	sp, #28
 8001638:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800164e:	4b1e      	ldr	r3, [pc, #120]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b04      	cmp	r3, #4
 800165c:	d002      	beq.n	8001664 <HAL_RCC_GetSysClockFreq+0x30>
 800165e:	2b08      	cmp	r3, #8
 8001660:	d003      	beq.n	800166a <HAL_RCC_GetSysClockFreq+0x36>
 8001662:	e027      	b.n	80016b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001664:	4b19      	ldr	r3, [pc, #100]	@ (80016cc <HAL_RCC_GetSysClockFreq+0x98>)
 8001666:	613b      	str	r3, [r7, #16]
      break;
 8001668:	e027      	b.n	80016ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	0c9b      	lsrs	r3, r3, #18
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	4a17      	ldr	r2, [pc, #92]	@ (80016d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001674:	5cd3      	ldrb	r3, [r2, r3]
 8001676:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d010      	beq.n	80016a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001682:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	0c5b      	lsrs	r3, r3, #17
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	4a11      	ldr	r2, [pc, #68]	@ (80016d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800168e:	5cd3      	ldrb	r3, [r2, r3]
 8001690:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a0d      	ldr	r2, [pc, #52]	@ (80016cc <HAL_RCC_GetSysClockFreq+0x98>)
 8001696:	fb03 f202 	mul.w	r2, r3, r2
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	e004      	b.n	80016ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a0c      	ldr	r2, [pc, #48]	@ (80016d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80016a8:	fb02 f303 	mul.w	r3, r2, r3
 80016ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	613b      	str	r3, [r7, #16]
      break;
 80016b2:	e002      	b.n	80016ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016b4:	4b05      	ldr	r3, [pc, #20]	@ (80016cc <HAL_RCC_GetSysClockFreq+0x98>)
 80016b6:	613b      	str	r3, [r7, #16]
      break;
 80016b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016ba:	693b      	ldr	r3, [r7, #16]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	371c      	adds	r7, #28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40021000 	.word	0x40021000
 80016cc:	007a1200 	.word	0x007a1200
 80016d0:	080029c0 	.word	0x080029c0
 80016d4:	080029d0 	.word	0x080029d0
 80016d8:	003d0900 	.word	0x003d0900

080016dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001710 <RCC_Delay+0x34>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001714 <RCC_Delay+0x38>)
 80016ea:	fba2 2303 	umull	r2, r3, r2, r3
 80016ee:	0a5b      	lsrs	r3, r3, #9
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	fb02 f303 	mul.w	r3, r2, r3
 80016f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016f8:	bf00      	nop
  }
  while (Delay --);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	1e5a      	subs	r2, r3, #1
 80016fe:	60fa      	str	r2, [r7, #12]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1f9      	bne.n	80016f8 <RCC_Delay+0x1c>
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	20000000 	.word	0x20000000
 8001714:	10624dd3 	.word	0x10624dd3

08001718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e041      	b.n	80017ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d106      	bne.n	8001744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7fe ffee 	bl	8000720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2202      	movs	r2, #2
 8001748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3304      	adds	r3, #4
 8001754:	4619      	mov	r1, r3
 8001756:	4610      	mov	r0, r2
 8001758:	f000 fc4a 	bl	8001ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e041      	b.n	800184c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d106      	bne.n	80017e2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 f839 	bl	8001854 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2202      	movs	r2, #2
 80017e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3304      	adds	r3, #4
 80017f2:	4619      	mov	r1, r3
 80017f4:	4610      	mov	r0, r2
 80017f6:	f000 fbfb 	bl	8001ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
	...

08001868 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d109      	bne.n	800188c <HAL_TIM_OC_Start+0x24>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b01      	cmp	r3, #1
 8001882:	bf14      	ite	ne
 8001884:	2301      	movne	r3, #1
 8001886:	2300      	moveq	r3, #0
 8001888:	b2db      	uxtb	r3, r3
 800188a:	e022      	b.n	80018d2 <HAL_TIM_OC_Start+0x6a>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	2b04      	cmp	r3, #4
 8001890:	d109      	bne.n	80018a6 <HAL_TIM_OC_Start+0x3e>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b01      	cmp	r3, #1
 800189c:	bf14      	ite	ne
 800189e:	2301      	movne	r3, #1
 80018a0:	2300      	moveq	r3, #0
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	e015      	b.n	80018d2 <HAL_TIM_OC_Start+0x6a>
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	2b08      	cmp	r3, #8
 80018aa:	d109      	bne.n	80018c0 <HAL_TIM_OC_Start+0x58>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	bf14      	ite	ne
 80018b8:	2301      	movne	r3, #1
 80018ba:	2300      	moveq	r3, #0
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	e008      	b.n	80018d2 <HAL_TIM_OC_Start+0x6a>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	bf14      	ite	ne
 80018cc:	2301      	movne	r3, #1
 80018ce:	2300      	moveq	r3, #0
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e05e      	b.n	8001998 <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d104      	bne.n	80018ea <HAL_TIM_OC_Start+0x82>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2202      	movs	r2, #2
 80018e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80018e8:	e013      	b.n	8001912 <HAL_TIM_OC_Start+0xaa>
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d104      	bne.n	80018fa <HAL_TIM_OC_Start+0x92>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2202      	movs	r2, #2
 80018f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80018f8:	e00b      	b.n	8001912 <HAL_TIM_OC_Start+0xaa>
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d104      	bne.n	800190a <HAL_TIM_OC_Start+0xa2>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2202      	movs	r2, #2
 8001904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001908:	e003      	b.n	8001912 <HAL_TIM_OC_Start+0xaa>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2202      	movs	r2, #2
 800190e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2201      	movs	r2, #1
 8001918:	6839      	ldr	r1, [r7, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f000 fe79 	bl	8002612 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a1e      	ldr	r2, [pc, #120]	@ (80019a0 <HAL_TIM_OC_Start+0x138>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d107      	bne.n	800193a <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001938:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a18      	ldr	r2, [pc, #96]	@ (80019a0 <HAL_TIM_OC_Start+0x138>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d00e      	beq.n	8001962 <HAL_TIM_OC_Start+0xfa>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800194c:	d009      	beq.n	8001962 <HAL_TIM_OC_Start+0xfa>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a14      	ldr	r2, [pc, #80]	@ (80019a4 <HAL_TIM_OC_Start+0x13c>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d004      	beq.n	8001962 <HAL_TIM_OC_Start+0xfa>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a12      	ldr	r2, [pc, #72]	@ (80019a8 <HAL_TIM_OC_Start+0x140>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d111      	bne.n	8001986 <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2b06      	cmp	r3, #6
 8001972:	d010      	beq.n	8001996 <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 0201 	orr.w	r2, r2, #1
 8001982:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001984:	e007      	b.n	8001996 <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 0201 	orr.w	r2, r2, #1
 8001994:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40012c00 	.word	0x40012c00
 80019a4:	40000400 	.word	0x40000400
 80019a8:	40000800 	.word	0x40000800

080019ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e041      	b.n	8001a42 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d106      	bne.n	80019d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f839 	bl	8001a4a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2202      	movs	r2, #2
 80019dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3304      	adds	r3, #4
 80019e8:	4619      	mov	r1, r3
 80019ea:	4610      	mov	r0, r2
 80019ec:	f000 fb00 	bl	8001ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d109      	bne.n	8001a80 <HAL_TIM_PWM_Start+0x24>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	bf14      	ite	ne
 8001a78:	2301      	movne	r3, #1
 8001a7a:	2300      	moveq	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	e022      	b.n	8001ac6 <HAL_TIM_PWM_Start+0x6a>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d109      	bne.n	8001a9a <HAL_TIM_PWM_Start+0x3e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	bf14      	ite	ne
 8001a92:	2301      	movne	r3, #1
 8001a94:	2300      	moveq	r3, #0
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	e015      	b.n	8001ac6 <HAL_TIM_PWM_Start+0x6a>
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d109      	bne.n	8001ab4 <HAL_TIM_PWM_Start+0x58>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	bf14      	ite	ne
 8001aac:	2301      	movne	r3, #1
 8001aae:	2300      	moveq	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	e008      	b.n	8001ac6 <HAL_TIM_PWM_Start+0x6a>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	bf14      	ite	ne
 8001ac0:	2301      	movne	r3, #1
 8001ac2:	2300      	moveq	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e05e      	b.n	8001b8c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d104      	bne.n	8001ade <HAL_TIM_PWM_Start+0x82>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001adc:	e013      	b.n	8001b06 <HAL_TIM_PWM_Start+0xaa>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	d104      	bne.n	8001aee <HAL_TIM_PWM_Start+0x92>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001aec:	e00b      	b.n	8001b06 <HAL_TIM_PWM_Start+0xaa>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d104      	bne.n	8001afe <HAL_TIM_PWM_Start+0xa2>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2202      	movs	r2, #2
 8001af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001afc:	e003      	b.n	8001b06 <HAL_TIM_PWM_Start+0xaa>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2202      	movs	r2, #2
 8001b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	6839      	ldr	r1, [r7, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 fd7f 	bl	8002612 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a1e      	ldr	r2, [pc, #120]	@ (8001b94 <HAL_TIM_PWM_Start+0x138>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d107      	bne.n	8001b2e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b2c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a18      	ldr	r2, [pc, #96]	@ (8001b94 <HAL_TIM_PWM_Start+0x138>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d00e      	beq.n	8001b56 <HAL_TIM_PWM_Start+0xfa>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b40:	d009      	beq.n	8001b56 <HAL_TIM_PWM_Start+0xfa>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a14      	ldr	r2, [pc, #80]	@ (8001b98 <HAL_TIM_PWM_Start+0x13c>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d004      	beq.n	8001b56 <HAL_TIM_PWM_Start+0xfa>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a12      	ldr	r2, [pc, #72]	@ (8001b9c <HAL_TIM_PWM_Start+0x140>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d111      	bne.n	8001b7a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2b06      	cmp	r3, #6
 8001b66:	d010      	beq.n	8001b8a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b78:	e007      	b.n	8001b8a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f042 0201 	orr.w	r2, r2, #1
 8001b88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40012c00 	.word	0x40012c00
 8001b98:	40000400 	.word	0x40000400
 8001b9c:	40000800 	.word	0x40000800

08001ba0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bac:	2300      	movs	r3, #0
 8001bae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d101      	bne.n	8001bbe <HAL_TIM_OC_ConfigChannel+0x1e>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e048      	b.n	8001c50 <HAL_TIM_OC_ConfigChannel+0xb0>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b0c      	cmp	r3, #12
 8001bca:	d839      	bhi.n	8001c40 <HAL_TIM_OC_ConfigChannel+0xa0>
 8001bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8001bd4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8001bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd2:	bf00      	nop
 8001bd4:	08001c09 	.word	0x08001c09
 8001bd8:	08001c41 	.word	0x08001c41
 8001bdc:	08001c41 	.word	0x08001c41
 8001be0:	08001c41 	.word	0x08001c41
 8001be4:	08001c17 	.word	0x08001c17
 8001be8:	08001c41 	.word	0x08001c41
 8001bec:	08001c41 	.word	0x08001c41
 8001bf0:	08001c41 	.word	0x08001c41
 8001bf4:	08001c25 	.word	0x08001c25
 8001bf8:	08001c41 	.word	0x08001c41
 8001bfc:	08001c41 	.word	0x08001c41
 8001c00:	08001c41 	.word	0x08001c41
 8001c04:	08001c33 	.word	0x08001c33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68b9      	ldr	r1, [r7, #8]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 fa50 	bl	80020b4 <TIM_OC1_SetConfig>
      break;
 8001c14:	e017      	b.n	8001c46 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68b9      	ldr	r1, [r7, #8]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f000 faaf 	bl	8002180 <TIM_OC2_SetConfig>
      break;
 8001c22:	e010      	b.n	8001c46 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68b9      	ldr	r1, [r7, #8]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 fb12 	bl	8002254 <TIM_OC3_SetConfig>
      break;
 8001c30:	e009      	b.n	8001c46 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68b9      	ldr	r1, [r7, #8]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f000 fb75 	bl	8002328 <TIM_OC4_SetConfig>
      break;
 8001c3e:	e002      	b.n	8001c46 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	75fb      	strb	r3, [r7, #23]
      break;
 8001c44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e0ae      	b.n	8001dd4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b0c      	cmp	r3, #12
 8001c82:	f200 809f 	bhi.w	8001dc4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001c86:	a201      	add	r2, pc, #4	@ (adr r2, 8001c8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c8c:	08001cc1 	.word	0x08001cc1
 8001c90:	08001dc5 	.word	0x08001dc5
 8001c94:	08001dc5 	.word	0x08001dc5
 8001c98:	08001dc5 	.word	0x08001dc5
 8001c9c:	08001d01 	.word	0x08001d01
 8001ca0:	08001dc5 	.word	0x08001dc5
 8001ca4:	08001dc5 	.word	0x08001dc5
 8001ca8:	08001dc5 	.word	0x08001dc5
 8001cac:	08001d43 	.word	0x08001d43
 8001cb0:	08001dc5 	.word	0x08001dc5
 8001cb4:	08001dc5 	.word	0x08001dc5
 8001cb8:	08001dc5 	.word	0x08001dc5
 8001cbc:	08001d83 	.word	0x08001d83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 f9f4 	bl	80020b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	699a      	ldr	r2, [r3, #24]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0208 	orr.w	r2, r2, #8
 8001cda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699a      	ldr	r2, [r3, #24]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0204 	bic.w	r2, r2, #4
 8001cea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6999      	ldr	r1, [r3, #24]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	691a      	ldr	r2, [r3, #16]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	619a      	str	r2, [r3, #24]
      break;
 8001cfe:	e064      	b.n	8001dca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68b9      	ldr	r1, [r7, #8]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 fa3a 	bl	8002180 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699a      	ldr	r2, [r3, #24]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	699a      	ldr	r2, [r3, #24]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6999      	ldr	r1, [r3, #24]
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	021a      	lsls	r2, r3, #8
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	619a      	str	r2, [r3, #24]
      break;
 8001d40:	e043      	b.n	8001dca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68b9      	ldr	r1, [r7, #8]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 fa83 	bl	8002254 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	69da      	ldr	r2, [r3, #28]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f042 0208 	orr.w	r2, r2, #8
 8001d5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	69da      	ldr	r2, [r3, #28]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0204 	bic.w	r2, r2, #4
 8001d6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	69d9      	ldr	r1, [r3, #28]
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	691a      	ldr	r2, [r3, #16]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	61da      	str	r2, [r3, #28]
      break;
 8001d80:	e023      	b.n	8001dca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68b9      	ldr	r1, [r7, #8]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 facd 	bl	8002328 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	69da      	ldr	r2, [r3, #28]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	69da      	ldr	r2, [r3, #28]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	69d9      	ldr	r1, [r3, #28]
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	021a      	lsls	r2, r3, #8
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	61da      	str	r2, [r3, #28]
      break;
 8001dc2:	e002      	b.n	8001dca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	75fb      	strb	r3, [r7, #23]
      break;
 8001dc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <HAL_TIM_ConfigClockSource+0x1c>
 8001df4:	2302      	movs	r3, #2
 8001df6:	e0b4      	b.n	8001f62 <HAL_TIM_ConfigClockSource+0x186>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2202      	movs	r2, #2
 8001e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001e16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001e1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68ba      	ldr	r2, [r7, #8]
 8001e26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e30:	d03e      	beq.n	8001eb0 <HAL_TIM_ConfigClockSource+0xd4>
 8001e32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e36:	f200 8087 	bhi.w	8001f48 <HAL_TIM_ConfigClockSource+0x16c>
 8001e3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e3e:	f000 8086 	beq.w	8001f4e <HAL_TIM_ConfigClockSource+0x172>
 8001e42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e46:	d87f      	bhi.n	8001f48 <HAL_TIM_ConfigClockSource+0x16c>
 8001e48:	2b70      	cmp	r3, #112	@ 0x70
 8001e4a:	d01a      	beq.n	8001e82 <HAL_TIM_ConfigClockSource+0xa6>
 8001e4c:	2b70      	cmp	r3, #112	@ 0x70
 8001e4e:	d87b      	bhi.n	8001f48 <HAL_TIM_ConfigClockSource+0x16c>
 8001e50:	2b60      	cmp	r3, #96	@ 0x60
 8001e52:	d050      	beq.n	8001ef6 <HAL_TIM_ConfigClockSource+0x11a>
 8001e54:	2b60      	cmp	r3, #96	@ 0x60
 8001e56:	d877      	bhi.n	8001f48 <HAL_TIM_ConfigClockSource+0x16c>
 8001e58:	2b50      	cmp	r3, #80	@ 0x50
 8001e5a:	d03c      	beq.n	8001ed6 <HAL_TIM_ConfigClockSource+0xfa>
 8001e5c:	2b50      	cmp	r3, #80	@ 0x50
 8001e5e:	d873      	bhi.n	8001f48 <HAL_TIM_ConfigClockSource+0x16c>
 8001e60:	2b40      	cmp	r3, #64	@ 0x40
 8001e62:	d058      	beq.n	8001f16 <HAL_TIM_ConfigClockSource+0x13a>
 8001e64:	2b40      	cmp	r3, #64	@ 0x40
 8001e66:	d86f      	bhi.n	8001f48 <HAL_TIM_ConfigClockSource+0x16c>
 8001e68:	2b30      	cmp	r3, #48	@ 0x30
 8001e6a:	d064      	beq.n	8001f36 <HAL_TIM_ConfigClockSource+0x15a>
 8001e6c:	2b30      	cmp	r3, #48	@ 0x30
 8001e6e:	d86b      	bhi.n	8001f48 <HAL_TIM_ConfigClockSource+0x16c>
 8001e70:	2b20      	cmp	r3, #32
 8001e72:	d060      	beq.n	8001f36 <HAL_TIM_ConfigClockSource+0x15a>
 8001e74:	2b20      	cmp	r3, #32
 8001e76:	d867      	bhi.n	8001f48 <HAL_TIM_ConfigClockSource+0x16c>
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d05c      	beq.n	8001f36 <HAL_TIM_ConfigClockSource+0x15a>
 8001e7c:	2b10      	cmp	r3, #16
 8001e7e:	d05a      	beq.n	8001f36 <HAL_TIM_ConfigClockSource+0x15a>
 8001e80:	e062      	b.n	8001f48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e92:	f000 fb9f 	bl	80025d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001ea4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	609a      	str	r2, [r3, #8]
      break;
 8001eae:	e04f      	b.n	8001f50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ec0:	f000 fb88 	bl	80025d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ed2:	609a      	str	r2, [r3, #8]
      break;
 8001ed4:	e03c      	b.n	8001f50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	f000 faff 	bl	80024e6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2150      	movs	r1, #80	@ 0x50
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 fb56 	bl	80025a0 <TIM_ITRx_SetConfig>
      break;
 8001ef4:	e02c      	b.n	8001f50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f02:	461a      	mov	r2, r3
 8001f04:	f000 fb1d 	bl	8002542 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2160      	movs	r1, #96	@ 0x60
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 fb46 	bl	80025a0 <TIM_ITRx_SetConfig>
      break;
 8001f14:	e01c      	b.n	8001f50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f22:	461a      	mov	r2, r3
 8001f24:	f000 fadf 	bl	80024e6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2140      	movs	r1, #64	@ 0x40
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 fb36 	bl	80025a0 <TIM_ITRx_SetConfig>
      break;
 8001f34:	e00c      	b.n	8001f50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4610      	mov	r0, r2
 8001f42:	f000 fb2d 	bl	80025a0 <TIM_ITRx_SetConfig>
      break;
 8001f46:	e003      	b.n	8001f50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f4c:	e000      	b.n	8001f50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001f4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
 8001f72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d101      	bne.n	8001f82 <HAL_TIM_SlaveConfigSynchro+0x18>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e031      	b.n	8001fe6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8001f92:	6839      	ldr	r1, [r7, #0]
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 fa15 	bl	80023c4 <TIM_SlaveTimer_SetConfig>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d009      	beq.n	8001fb4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e018      	b.n	8001fe6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fc2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001fd2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a29      	ldr	r2, [pc, #164]	@ (80020a8 <TIM_Base_SetConfig+0xb8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d00b      	beq.n	8002020 <TIM_Base_SetConfig+0x30>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800200e:	d007      	beq.n	8002020 <TIM_Base_SetConfig+0x30>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a26      	ldr	r2, [pc, #152]	@ (80020ac <TIM_Base_SetConfig+0xbc>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d003      	beq.n	8002020 <TIM_Base_SetConfig+0x30>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a25      	ldr	r2, [pc, #148]	@ (80020b0 <TIM_Base_SetConfig+0xc0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d108      	bne.n	8002032 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	4313      	orrs	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a1c      	ldr	r2, [pc, #112]	@ (80020a8 <TIM_Base_SetConfig+0xb8>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00b      	beq.n	8002052 <TIM_Base_SetConfig+0x62>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002040:	d007      	beq.n	8002052 <TIM_Base_SetConfig+0x62>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a19      	ldr	r2, [pc, #100]	@ (80020ac <TIM_Base_SetConfig+0xbc>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d003      	beq.n	8002052 <TIM_Base_SetConfig+0x62>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a18      	ldr	r2, [pc, #96]	@ (80020b0 <TIM_Base_SetConfig+0xc0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d108      	bne.n	8002064 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	4313      	orrs	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	4313      	orrs	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a07      	ldr	r2, [pc, #28]	@ (80020a8 <TIM_Base_SetConfig+0xb8>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d103      	bne.n	8002098 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	615a      	str	r2, [r3, #20]
}
 800209e:	bf00      	nop
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr
 80020a8:	40012c00 	.word	0x40012c00
 80020ac:	40000400 	.word	0x40000400
 80020b0:	40000800 	.word	0x40000800

080020b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b087      	sub	sp, #28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	f023 0201 	bic.w	r2, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f023 0303 	bic.w	r3, r3, #3
 80020ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f023 0302 	bic.w	r3, r3, #2
 80020fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	4313      	orrs	r3, r2
 8002106:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a1c      	ldr	r2, [pc, #112]	@ (800217c <TIM_OC1_SetConfig+0xc8>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d10c      	bne.n	800212a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f023 0308 	bic.w	r3, r3, #8
 8002116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	4313      	orrs	r3, r2
 8002120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f023 0304 	bic.w	r3, r3, #4
 8002128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a13      	ldr	r2, [pc, #76]	@ (800217c <TIM_OC1_SetConfig+0xc8>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d111      	bne.n	8002156 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002138:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002140:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	621a      	str	r2, [r3, #32]
}
 8002170:	bf00      	nop
 8002172:	371c      	adds	r7, #28
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40012c00 	.word	0x40012c00

08002180 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002180:	b480      	push	{r7}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	f023 0210 	bic.w	r2, r3, #16
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80021ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	021b      	lsls	r3, r3, #8
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f023 0320 	bic.w	r3, r3, #32
 80021ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a1d      	ldr	r2, [pc, #116]	@ (8002250 <TIM_OC2_SetConfig+0xd0>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d10d      	bne.n	80021fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80021e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80021fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a14      	ldr	r2, [pc, #80]	@ (8002250 <TIM_OC2_SetConfig+0xd0>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d113      	bne.n	800222c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800220a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002212:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	621a      	str	r2, [r3, #32]
}
 8002246:	bf00      	nop
 8002248:	371c      	adds	r7, #28
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	40012c00 	.word	0x40012c00

08002254 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002254:	b480      	push	{r7}
 8002256:	b087      	sub	sp, #28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f023 0303 	bic.w	r3, r3, #3
 800228a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	4313      	orrs	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800229c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	021b      	lsls	r3, r3, #8
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002324 <TIM_OC3_SetConfig+0xd0>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d10d      	bne.n	80022ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80022b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	021b      	lsls	r3, r3, #8
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80022cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a14      	ldr	r2, [pc, #80]	@ (8002324 <TIM_OC3_SetConfig+0xd0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d113      	bne.n	80022fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80022dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80022e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	621a      	str	r2, [r3, #32]
}
 8002318:	bf00      	nop
 800231a:	371c      	adds	r7, #28
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40012c00 	.word	0x40012c00

08002328 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800235e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	021b      	lsls	r3, r3, #8
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	4313      	orrs	r3, r2
 800236a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002372:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	031b      	lsls	r3, r3, #12
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a0f      	ldr	r2, [pc, #60]	@ (80023c0 <TIM_OC4_SetConfig+0x98>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d109      	bne.n	800239c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800238e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	019b      	lsls	r3, r3, #6
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4313      	orrs	r3, r2
 800239a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	621a      	str	r2, [r3, #32]
}
 80023b6:	bf00      	nop
 80023b8:	371c      	adds	r7, #28
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr
 80023c0:	40012c00 	.word	0x40012c00

080023c4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023e0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	f023 0307 	bic.w	r3, r3, #7
 80023f2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b70      	cmp	r3, #112	@ 0x70
 800240c:	d01a      	beq.n	8002444 <TIM_SlaveTimer_SetConfig+0x80>
 800240e:	2b70      	cmp	r3, #112	@ 0x70
 8002410:	d860      	bhi.n	80024d4 <TIM_SlaveTimer_SetConfig+0x110>
 8002412:	2b60      	cmp	r3, #96	@ 0x60
 8002414:	d054      	beq.n	80024c0 <TIM_SlaveTimer_SetConfig+0xfc>
 8002416:	2b60      	cmp	r3, #96	@ 0x60
 8002418:	d85c      	bhi.n	80024d4 <TIM_SlaveTimer_SetConfig+0x110>
 800241a:	2b50      	cmp	r3, #80	@ 0x50
 800241c:	d046      	beq.n	80024ac <TIM_SlaveTimer_SetConfig+0xe8>
 800241e:	2b50      	cmp	r3, #80	@ 0x50
 8002420:	d858      	bhi.n	80024d4 <TIM_SlaveTimer_SetConfig+0x110>
 8002422:	2b40      	cmp	r3, #64	@ 0x40
 8002424:	d019      	beq.n	800245a <TIM_SlaveTimer_SetConfig+0x96>
 8002426:	2b40      	cmp	r3, #64	@ 0x40
 8002428:	d854      	bhi.n	80024d4 <TIM_SlaveTimer_SetConfig+0x110>
 800242a:	2b30      	cmp	r3, #48	@ 0x30
 800242c:	d055      	beq.n	80024da <TIM_SlaveTimer_SetConfig+0x116>
 800242e:	2b30      	cmp	r3, #48	@ 0x30
 8002430:	d850      	bhi.n	80024d4 <TIM_SlaveTimer_SetConfig+0x110>
 8002432:	2b20      	cmp	r3, #32
 8002434:	d051      	beq.n	80024da <TIM_SlaveTimer_SetConfig+0x116>
 8002436:	2b20      	cmp	r3, #32
 8002438:	d84c      	bhi.n	80024d4 <TIM_SlaveTimer_SetConfig+0x110>
 800243a:	2b00      	cmp	r3, #0
 800243c:	d04d      	beq.n	80024da <TIM_SlaveTimer_SetConfig+0x116>
 800243e:	2b10      	cmp	r3, #16
 8002440:	d04b      	beq.n	80024da <TIM_SlaveTimer_SetConfig+0x116>
 8002442:	e047      	b.n	80024d4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8002454:	f000 f8be 	bl	80025d4 <TIM_ETR_SetConfig>
      break;
 8002458:	e040      	b.n	80024dc <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b05      	cmp	r3, #5
 8002460:	d101      	bne.n	8002466 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e03b      	b.n	80024de <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6a1a      	ldr	r2, [r3, #32]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0201 	bic.w	r2, r2, #1
 800247c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800248c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	4313      	orrs	r3, r2
 8002498:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	621a      	str	r2, [r3, #32]
      break;
 80024aa:	e017      	b.n	80024dc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024b8:	461a      	mov	r2, r3
 80024ba:	f000 f814 	bl	80024e6 <TIM_TI1_ConfigInputStage>
      break;
 80024be:	e00d      	b.n	80024dc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024cc:	461a      	mov	r2, r3
 80024ce:	f000 f838 	bl	8002542 <TIM_TI2_ConfigInputStage>
      break;
 80024d2:	e003      	b.n	80024dc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	75fb      	strb	r3, [r7, #23]
      break;
 80024d8:	e000      	b.n	80024dc <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80024da:	bf00      	nop
  }

  return status;
 80024dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b087      	sub	sp, #28
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	f023 0201 	bic.w	r2, r3, #1
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002510:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4313      	orrs	r3, r2
 800251a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f023 030a 	bic.w	r3, r3, #10
 8002522:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	4313      	orrs	r3, r2
 800252a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	621a      	str	r2, [r3, #32]
}
 8002538:	bf00      	nop
 800253a:	371c      	adds	r7, #28
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr

08002542 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002542:	b480      	push	{r7}
 8002544:	b087      	sub	sp, #28
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	f023 0210 	bic.w	r2, r3, #16
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800256c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	031b      	lsls	r3, r3, #12
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800257e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	4313      	orrs	r3, r2
 8002588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	621a      	str	r2, [r3, #32]
}
 8002596:	bf00      	nop
 8002598:	371c      	adds	r7, #28
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr

080025a0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4313      	orrs	r3, r2
 80025be:	f043 0307 	orr.w	r3, r3, #7
 80025c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	609a      	str	r2, [r3, #8]
}
 80025ca:	bf00      	nop
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b087      	sub	sp, #28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
 80025e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80025ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	021a      	lsls	r2, r3, #8
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	431a      	orrs	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	4313      	orrs	r3, r2
 8002600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	609a      	str	r2, [r3, #8]
}
 8002608:	bf00      	nop
 800260a:	371c      	adds	r7, #28
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr

08002612 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002612:	b480      	push	{r7}
 8002614:	b087      	sub	sp, #28
 8002616:	af00      	add	r7, sp, #0
 8002618:	60f8      	str	r0, [r7, #12]
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	f003 031f 	and.w	r3, r3, #31
 8002624:	2201      	movs	r2, #1
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a1a      	ldr	r2, [r3, #32]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	43db      	mvns	r3, r3
 8002634:	401a      	ands	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6a1a      	ldr	r2, [r3, #32]
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	f003 031f 	and.w	r3, r3, #31
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	fa01 f303 	lsl.w	r3, r1, r3
 800264a:	431a      	orrs	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	621a      	str	r2, [r3, #32]
}
 8002650:	bf00      	nop
 8002652:	371c      	adds	r7, #28
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr
	...

0800265c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d109      	bne.n	8002680 <HAL_TIMEx_PWMN_Start+0x24>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b01      	cmp	r3, #1
 8002676:	bf14      	ite	ne
 8002678:	2301      	movne	r3, #1
 800267a:	2300      	moveq	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	e022      	b.n	80026c6 <HAL_TIMEx_PWMN_Start+0x6a>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	2b04      	cmp	r3, #4
 8002684:	d109      	bne.n	800269a <HAL_TIMEx_PWMN_Start+0x3e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b01      	cmp	r3, #1
 8002690:	bf14      	ite	ne
 8002692:	2301      	movne	r3, #1
 8002694:	2300      	moveq	r3, #0
 8002696:	b2db      	uxtb	r3, r3
 8002698:	e015      	b.n	80026c6 <HAL_TIMEx_PWMN_Start+0x6a>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b08      	cmp	r3, #8
 800269e:	d109      	bne.n	80026b4 <HAL_TIMEx_PWMN_Start+0x58>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	bf14      	ite	ne
 80026ac:	2301      	movne	r3, #1
 80026ae:	2300      	moveq	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	e008      	b.n	80026c6 <HAL_TIMEx_PWMN_Start+0x6a>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b01      	cmp	r3, #1
 80026be:	bf14      	ite	ne
 80026c0:	2301      	movne	r3, #1
 80026c2:	2300      	moveq	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e059      	b.n	8002782 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d104      	bne.n	80026de <HAL_TIMEx_PWMN_Start+0x82>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2202      	movs	r2, #2
 80026d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026dc:	e013      	b.n	8002706 <HAL_TIMEx_PWMN_Start+0xaa>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d104      	bne.n	80026ee <HAL_TIMEx_PWMN_Start+0x92>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026ec:	e00b      	b.n	8002706 <HAL_TIMEx_PWMN_Start+0xaa>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d104      	bne.n	80026fe <HAL_TIMEx_PWMN_Start+0xa2>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026fc:	e003      	b.n	8002706 <HAL_TIMEx_PWMN_Start+0xaa>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2202      	movs	r2, #2
 8002702:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2204      	movs	r2, #4
 800270c:	6839      	ldr	r1, [r7, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f000 f8f1 	bl	80028f6 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002722:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a18      	ldr	r2, [pc, #96]	@ (800278c <HAL_TIMEx_PWMN_Start+0x130>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00e      	beq.n	800274c <HAL_TIMEx_PWMN_Start+0xf0>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002736:	d009      	beq.n	800274c <HAL_TIMEx_PWMN_Start+0xf0>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a14      	ldr	r2, [pc, #80]	@ (8002790 <HAL_TIMEx_PWMN_Start+0x134>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d004      	beq.n	800274c <HAL_TIMEx_PWMN_Start+0xf0>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a13      	ldr	r2, [pc, #76]	@ (8002794 <HAL_TIMEx_PWMN_Start+0x138>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d111      	bne.n	8002770 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2b06      	cmp	r3, #6
 800275c:	d010      	beq.n	8002780 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f042 0201 	orr.w	r2, r2, #1
 800276c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800276e:	e007      	b.n	8002780 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0201 	orr.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40012c00 	.word	0x40012c00
 8002790:	40000400 	.word	0x40000400
 8002794:	40000800 	.word	0x40000800

08002798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027ac:	2302      	movs	r3, #2
 80027ae:	e046      	b.n	800283e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2202      	movs	r2, #2
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	4313      	orrs	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a16      	ldr	r2, [pc, #88]	@ (8002848 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d00e      	beq.n	8002812 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027fc:	d009      	beq.n	8002812 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a12      	ldr	r2, [pc, #72]	@ (800284c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d004      	beq.n	8002812 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a10      	ldr	r2, [pc, #64]	@ (8002850 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d10c      	bne.n	800282c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002818:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	4313      	orrs	r3, r2
 8002822:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr
 8002848:	40012c00 	.word	0x40012c00
 800284c:	40000400 	.word	0x40000400
 8002850:	40000800 	.word	0x40000800

08002854 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800285e:	2300      	movs	r3, #0
 8002860:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800286c:	2302      	movs	r3, #2
 800286e:	e03d      	b.n	80028ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	4313      	orrs	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	4313      	orrs	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr

080028f6 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b087      	sub	sp, #28
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	f003 031f 	and.w	r3, r3, #31
 8002908:	2204      	movs	r2, #4
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a1a      	ldr	r2, [r3, #32]
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	43db      	mvns	r3, r3
 8002918:	401a      	ands	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6a1a      	ldr	r2, [r3, #32]
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f003 031f 	and.w	r3, r3, #31
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	fa01 f303 	lsl.w	r3, r1, r3
 800292e:	431a      	orrs	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	621a      	str	r2, [r3, #32]
}
 8002934:	bf00      	nop
 8002936:	371c      	adds	r7, #28
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr

0800293e <memset>:
 800293e:	4603      	mov	r3, r0
 8002940:	4402      	add	r2, r0
 8002942:	4293      	cmp	r3, r2
 8002944:	d100      	bne.n	8002948 <memset+0xa>
 8002946:	4770      	bx	lr
 8002948:	f803 1b01 	strb.w	r1, [r3], #1
 800294c:	e7f9      	b.n	8002942 <memset+0x4>
	...

08002950 <__libc_init_array>:
 8002950:	b570      	push	{r4, r5, r6, lr}
 8002952:	2600      	movs	r6, #0
 8002954:	4d0c      	ldr	r5, [pc, #48]	@ (8002988 <__libc_init_array+0x38>)
 8002956:	4c0d      	ldr	r4, [pc, #52]	@ (800298c <__libc_init_array+0x3c>)
 8002958:	1b64      	subs	r4, r4, r5
 800295a:	10a4      	asrs	r4, r4, #2
 800295c:	42a6      	cmp	r6, r4
 800295e:	d109      	bne.n	8002974 <__libc_init_array+0x24>
 8002960:	f000 f81a 	bl	8002998 <_init>
 8002964:	2600      	movs	r6, #0
 8002966:	4d0a      	ldr	r5, [pc, #40]	@ (8002990 <__libc_init_array+0x40>)
 8002968:	4c0a      	ldr	r4, [pc, #40]	@ (8002994 <__libc_init_array+0x44>)
 800296a:	1b64      	subs	r4, r4, r5
 800296c:	10a4      	asrs	r4, r4, #2
 800296e:	42a6      	cmp	r6, r4
 8002970:	d105      	bne.n	800297e <__libc_init_array+0x2e>
 8002972:	bd70      	pop	{r4, r5, r6, pc}
 8002974:	f855 3b04 	ldr.w	r3, [r5], #4
 8002978:	4798      	blx	r3
 800297a:	3601      	adds	r6, #1
 800297c:	e7ee      	b.n	800295c <__libc_init_array+0xc>
 800297e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002982:	4798      	blx	r3
 8002984:	3601      	adds	r6, #1
 8002986:	e7f2      	b.n	800296e <__libc_init_array+0x1e>
 8002988:	080029d4 	.word	0x080029d4
 800298c:	080029d4 	.word	0x080029d4
 8002990:	080029d4 	.word	0x080029d4
 8002994:	080029d8 	.word	0x080029d8

08002998 <_init>:
 8002998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800299a:	bf00      	nop
 800299c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800299e:	bc08      	pop	{r3}
 80029a0:	469e      	mov	lr, r3
 80029a2:	4770      	bx	lr

080029a4 <_fini>:
 80029a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029a6:	bf00      	nop
 80029a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029aa:	bc08      	pop	{r3}
 80029ac:	469e      	mov	lr, r3
 80029ae:	4770      	bx	lr
